{"ast":null,"code":"import { memo, useMemo, createElement } from 'react';\nimport { animated, useSpring, useTransition } from '@react-spring/web';\nimport { textPropsByEngine, useTheme, useMotionConfig, degreesToRadians } from '@nivo/core';\nimport { timeFormat } from 'd3-time-format';\nimport { format } from 'd3-format';\nimport { getScaleTicks, centerScale } from '@nivo/scales';\nimport { jsxs, jsx, Fragment } from 'react/jsx-runtime';\nimport PropTypes from 'prop-types';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar isArray = function isArray(value) {\n  return Array.isArray(value);\n};\n\nvar computeCartesianTicks = function computeCartesianTicks(_ref) {\n  var axis = _ref.axis,\n      scale = _ref.scale,\n      ticksPosition = _ref.ticksPosition,\n      tickValues = _ref.tickValues,\n      tickSize = _ref.tickSize,\n      tickPadding = _ref.tickPadding,\n      tickRotation = _ref.tickRotation,\n      _ref$engine = _ref.engine,\n      engine = _ref$engine === void 0 ? 'svg' : _ref$engine;\n  var values = getScaleTicks(scale, tickValues);\n  var textProps = textPropsByEngine[engine];\n  var position = 'bandwidth' in scale ? centerScale(scale) : scale;\n  var line = {\n    lineX: 0,\n    lineY: 0\n  };\n  var text = {\n    textX: 0,\n    textY: 0\n  };\n  var isRTL = typeof document === 'object' ? document.dir === 'rtl' : false;\n  var translate;\n  var textAlign = textProps.align.center;\n  var textBaseline = textProps.baseline.center;\n\n  if (axis === 'x') {\n    translate = function translate(d) {\n      var _position;\n\n      return {\n        x: (_position = position(d)) !== null && _position !== void 0 ? _position : 0,\n        y: 0\n      };\n    };\n\n    line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1);\n    text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1);\n\n    if (ticksPosition === 'after') {\n      textBaseline = textProps.baseline.top;\n    } else {\n      textBaseline = textProps.baseline.bottom;\n    }\n\n    if (tickRotation === 0) {\n      textAlign = textProps.align.center;\n    } else if (ticksPosition === 'after' && tickRotation < 0 || ticksPosition === 'before' && tickRotation > 0) {\n      textAlign = textProps.align[isRTL ? 'left' : 'right'];\n      textBaseline = textProps.baseline.center;\n    } else if (ticksPosition === 'after' && tickRotation > 0 || ticksPosition === 'before' && tickRotation < 0) {\n      textAlign = textProps.align[isRTL ? 'right' : 'left'];\n      textBaseline = textProps.baseline.center;\n    }\n  } else {\n    translate = function translate(d) {\n      var _position2;\n\n      return {\n        x: 0,\n        y: (_position2 = position(d)) !== null && _position2 !== void 0 ? _position2 : 0\n      };\n    };\n\n    line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1);\n    text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1);\n\n    if (ticksPosition === 'after') {\n      textAlign = textProps.align.left;\n    } else {\n      textAlign = textProps.align.right;\n    }\n  }\n\n  var ticks = values.map(function (value) {\n    return _objectSpread2(_objectSpread2(_objectSpread2({\n      key: typeof value === 'number' || typeof value === 'string' ? value : \"\".concat(value),\n      value: value\n    }, translate(value)), line), text);\n  });\n  return {\n    ticks: ticks,\n    textAlign: textAlign,\n    textBaseline: textBaseline\n  };\n};\n\nvar getFormatter = function getFormatter(format$1, scale) {\n  if (typeof format$1 === 'undefined' || typeof format$1 === 'function') return format$1;\n\n  if (scale.type === 'time') {\n    var formatter = timeFormat(format$1);\n    return function (d) {\n      return formatter(d instanceof Date ? d : new Date(d));\n    };\n  }\n\n  return format(format$1);\n};\n\nvar computeGridLines = function computeGridLines(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      scale = _ref2.scale,\n      axis = _ref2.axis,\n      _values = _ref2.values;\n  var lineValues = isArray(_values) ? _values : undefined;\n  var values = lineValues || getScaleTicks(scale, _values);\n  var position = 'bandwidth' in scale ? centerScale(scale) : scale;\n  var lines = axis === 'x' ? values.map(function (value) {\n    var _position3, _position4;\n\n    return {\n      key: \"\".concat(value),\n      x1: (_position3 = position(value)) !== null && _position3 !== void 0 ? _position3 : 0,\n      x2: (_position4 = position(value)) !== null && _position4 !== void 0 ? _position4 : 0,\n      y1: 0,\n      y2: height\n    };\n  }) : values.map(function (value) {\n    var _position5, _position6;\n\n    return {\n      key: \"\".concat(value),\n      x1: 0,\n      x2: width,\n      y1: (_position5 = position(value)) !== null && _position5 !== void 0 ? _position5 : 0,\n      y2: (_position6 = position(value)) !== null && _position6 !== void 0 ? _position6 : 0\n    };\n  });\n  return lines;\n};\n\nvar AxisTick = function AxisTick(_ref) {\n  var _format;\n\n  var _value = _ref.value,\n      format = _ref.format,\n      lineX = _ref.lineX,\n      lineY = _ref.lineY,\n      _onClick = _ref.onClick,\n      textBaseline = _ref.textBaseline,\n      textAnchor = _ref.textAnchor,\n      animatedProps = _ref.animatedProps;\n  var theme = useTheme();\n  var value = (_format = format === null || format === void 0 ? void 0 : format(_value)) !== null && _format !== void 0 ? _format : _value;\n  var props = useMemo(function () {\n    var style = {\n      opacity: animatedProps.opacity\n    };\n\n    if (!_onClick) {\n      return {\n        style: style\n      };\n    }\n\n    return {\n      style: _objectSpread2(_objectSpread2({}, style), {}, {\n        cursor: 'pointer'\n      }),\n      onClick: function onClick(event) {\n        return _onClick(event, value);\n      }\n    };\n  }, [animatedProps.opacity, _onClick, value]);\n  return jsxs(animated.g, _objectSpread2(_objectSpread2({\n    transform: animatedProps.transform\n  }, props), {}, {\n    children: [jsx(\"line\", {\n      x1: 0,\n      x2: lineX,\n      y1: 0,\n      y2: lineY,\n      style: theme.axis.ticks.line\n    }), jsx(animated.text, {\n      dominantBaseline: textBaseline,\n      textAnchor: textAnchor,\n      transform: animatedProps.textTransform,\n      style: theme.axis.ticks.text,\n      children: value\n    })]\n  }));\n};\n\nvar memoizedAxisTick = memo(AxisTick);\n\nvar Axis = function Axis(_ref) {\n  var axis = _ref.axis,\n      scale = _ref.scale,\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y,\n      length = _ref.length,\n      ticksPosition = _ref.ticksPosition,\n      tickValues = _ref.tickValues,\n      _ref$tickSize = _ref.tickSize,\n      tickSize = _ref$tickSize === void 0 ? 5 : _ref$tickSize,\n      _ref$tickPadding = _ref.tickPadding,\n      tickPadding = _ref$tickPadding === void 0 ? 5 : _ref$tickPadding,\n      _ref$tickRotation = _ref.tickRotation,\n      tickRotation = _ref$tickRotation === void 0 ? 0 : _ref$tickRotation,\n      format = _ref.format,\n      _ref$renderTick = _ref.renderTick,\n      renderTick = _ref$renderTick === void 0 ? memoizedAxisTick : _ref$renderTick,\n      legend = _ref.legend,\n      _ref$legendPosition = _ref.legendPosition,\n      legendPosition = _ref$legendPosition === void 0 ? 'end' : _ref$legendPosition,\n      _ref$legendOffset = _ref.legendOffset,\n      legendOffset = _ref$legendOffset === void 0 ? 0 : _ref$legendOffset,\n      onClick = _ref.onClick,\n      ariaHidden = _ref.ariaHidden;\n  var theme = useTheme();\n  var formatValue = useMemo(function () {\n    return getFormatter(format, scale);\n  }, [format, scale]);\n\n  var _computeCartesianTick = computeCartesianTicks({\n    axis: axis,\n    scale: scale,\n    ticksPosition: ticksPosition,\n    tickValues: tickValues,\n    tickSize: tickSize,\n    tickPadding: tickPadding,\n    tickRotation: tickRotation\n  }),\n      ticks = _computeCartesianTick.ticks,\n      textAlign = _computeCartesianTick.textAlign,\n      textBaseline = _computeCartesianTick.textBaseline;\n\n  var legendNode = null;\n\n  if (legend !== undefined) {\n    var legendX = 0;\n    var legendY = 0;\n    var legendRotation = 0;\n    var textAnchor;\n\n    if (axis === 'y') {\n      legendRotation = -90;\n      legendX = legendOffset;\n\n      if (legendPosition === 'start') {\n        textAnchor = 'start';\n        legendY = length;\n      } else if (legendPosition === 'middle') {\n        textAnchor = 'middle';\n        legendY = length / 2;\n      } else if (legendPosition === 'end') {\n        textAnchor = 'end';\n      }\n    } else {\n      legendY = legendOffset;\n\n      if (legendPosition === 'start') {\n        textAnchor = 'start';\n      } else if (legendPosition === 'middle') {\n        textAnchor = 'middle';\n        legendX = length / 2;\n      } else if (legendPosition === 'end') {\n        textAnchor = 'end';\n        legendX = length;\n      }\n    }\n\n    legendNode = jsx(\"text\", {\n      transform: \"translate(\".concat(legendX, \", \").concat(legendY, \") rotate(\").concat(legendRotation, \")\"),\n      textAnchor: textAnchor,\n      style: _objectSpread2({\n        dominantBaseline: 'central'\n      }, theme.axis.legend.text),\n      children: legend\n    });\n  }\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var animatedProps = useSpring({\n    transform: \"translate(\".concat(x, \",\").concat(y, \")\"),\n    lineX2: axis === 'x' ? length : 0,\n    lineY2: axis === 'x' ? 0 : length,\n    config: springConfig,\n    immediate: !animate\n  });\n  var transition = useTransition(ticks, {\n    keys: function keys(tick) {\n      return tick.key;\n    },\n    initial: function initial(tick) {\n      return {\n        opacity: 1,\n        transform: \"translate(\".concat(tick.x, \",\").concat(tick.y, \")\"),\n        textTransform: \"translate(\".concat(tick.textX, \",\").concat(tick.textY, \") rotate(\").concat(tickRotation, \")\")\n      };\n    },\n    from: function from(tick) {\n      return {\n        opacity: 0,\n        transform: \"translate(\".concat(tick.x, \",\").concat(tick.y, \")\"),\n        textTransform: \"translate(\".concat(tick.textX, \",\").concat(tick.textY, \") rotate(\").concat(tickRotation, \")\")\n      };\n    },\n    enter: function enter(tick) {\n      return {\n        opacity: 1,\n        transform: \"translate(\".concat(tick.x, \",\").concat(tick.y, \")\"),\n        textTransform: \"translate(\".concat(tick.textX, \",\").concat(tick.textY, \") rotate(\").concat(tickRotation, \")\")\n      };\n    },\n    update: function update(tick) {\n      return {\n        opacity: 1,\n        transform: \"translate(\".concat(tick.x, \",\").concat(tick.y, \")\"),\n        textTransform: \"translate(\".concat(tick.textX, \",\").concat(tick.textY, \") rotate(\").concat(tickRotation, \")\")\n      };\n    },\n    leave: {\n      opacity: 0\n    },\n    config: springConfig,\n    immediate: !animate\n  });\n  return jsxs(animated.g, {\n    transform: animatedProps.transform,\n    \"aria-hidden\": ariaHidden,\n    children: [transition(function (transitionProps, tick, _state, tickIndex) {\n      return createElement(renderTick, _objectSpread2(_objectSpread2({\n        tickIndex: tickIndex,\n        format: formatValue,\n        rotate: tickRotation,\n        textBaseline: textBaseline,\n        textAnchor: textAlign,\n        animatedProps: transitionProps\n      }, tick), onClick ? {\n        onClick: onClick\n      } : {}));\n    }), jsx(animated.line, {\n      style: theme.axis.domain.line,\n      x1: 0,\n      x2: animatedProps.lineX2,\n      y1: 0,\n      y2: animatedProps.lineY2\n    }), legendNode]\n  });\n};\n\nvar memoizedAxis = memo(Axis);\nvar axisPropTypes = {\n  ticksPosition: PropTypes.oneOf(['before', 'after']),\n  tickValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])), PropTypes.string]),\n  tickSize: PropTypes.number,\n  tickPadding: PropTypes.number,\n  tickRotation: PropTypes.number,\n  format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  renderTick: PropTypes.func,\n  legend: PropTypes.node,\n  legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n  legendOffset: PropTypes.number,\n  ariaHidden: PropTypes.bool\n};\nvar axisPropType = PropTypes.shape(axisPropTypes);\nvar positions = ['top', 'right', 'bottom', 'left'];\nvar Axes = memo(function (_ref) {\n  var xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      width = _ref.width,\n      height = _ref.height,\n      top = _ref.top,\n      right = _ref.right,\n      bottom = _ref.bottom,\n      left = _ref.left;\n  var axes = {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n  return jsx(Fragment, {\n    children: positions.map(function (position) {\n      var axis = axes[position];\n      if (!axis) return null;\n      var isXAxis = position === 'top' || position === 'bottom';\n      var ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after';\n      return jsx(memoizedAxis, _objectSpread2(_objectSpread2({}, axis), {}, {\n        axis: isXAxis ? 'x' : 'y',\n        x: position === 'right' ? width : 0,\n        y: position === 'bottom' ? height : 0,\n        scale: isXAxis ? xScale : yScale,\n        length: isXAxis ? width : height,\n        ticksPosition: ticksPosition\n      }), position);\n    })\n  });\n});\nvar GridLine = memo(function (_ref) {\n  var animatedProps = _ref.animatedProps;\n  var theme = useTheme();\n  return jsx(animated.line, _objectSpread2(_objectSpread2({}, animatedProps), theme.grid.line));\n});\nvar GridLines = memo(function (_ref) {\n  var lines = _ref.lines;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var transition = useTransition(lines, {\n    keys: function keys(line) {\n      return line.key;\n    },\n    initial: function initial(line) {\n      return {\n        opacity: 1,\n        x1: line.x1,\n        x2: line.x2,\n        y1: line.y1,\n        y2: line.y2\n      };\n    },\n    from: function from(line) {\n      return {\n        opacity: 0,\n        x1: line.x1,\n        x2: line.x2,\n        y1: line.y1,\n        y2: line.y2\n      };\n    },\n    enter: function enter(line) {\n      return {\n        opacity: 1,\n        x1: line.x1,\n        x2: line.x2,\n        y1: line.y1,\n        y2: line.y2\n      };\n    },\n    update: function update(line) {\n      return {\n        opacity: 1,\n        x1: line.x1,\n        x2: line.x2,\n        y1: line.y1,\n        y2: line.y2\n      };\n    },\n    leave: {\n      opacity: 0\n    },\n    config: springConfig,\n    immediate: !animate\n  });\n  return jsx(\"g\", {\n    children: transition(function (animatedProps, line) {\n      return createElement(GridLine, _objectSpread2(_objectSpread2({}, line), {}, {\n        key: line.key,\n        animatedProps: animatedProps\n      }));\n    })\n  });\n});\nvar Grid = memo(function (_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      xValues = _ref.xValues,\n      yValues = _ref.yValues;\n  var xLines = useMemo(function () {\n    if (!xScale) return false;\n    return computeGridLines({\n      width: width,\n      height: height,\n      scale: xScale,\n      axis: 'x',\n      values: xValues\n    });\n  }, [xScale, xValues, width, height]);\n  var yLines = useMemo(function () {\n    if (!yScale) return false;\n    return computeGridLines({\n      width: width,\n      height: height,\n      scale: yScale,\n      axis: 'y',\n      values: yValues\n    });\n  }, [height, width, yScale, yValues]);\n  return jsxs(Fragment, {\n    children: [xLines && jsx(GridLines, {\n      lines: xLines\n    }), yLines && jsx(GridLines, {\n      lines: yLines\n    })]\n  });\n});\n\nvar renderAxisToCanvas = function renderAxisToCanvas(ctx, _ref) {\n  var _theme$axis$domain$li;\n\n  var axis = _ref.axis,\n      scale = _ref.scale,\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y,\n      length = _ref.length,\n      ticksPosition = _ref.ticksPosition,\n      tickValues = _ref.tickValues,\n      _ref$tickSize = _ref.tickSize,\n      tickSize = _ref$tickSize === void 0 ? 5 : _ref$tickSize,\n      _ref$tickPadding = _ref.tickPadding,\n      tickPadding = _ref$tickPadding === void 0 ? 5 : _ref$tickPadding,\n      _ref$tickRotation = _ref.tickRotation,\n      tickRotation = _ref$tickRotation === void 0 ? 0 : _ref$tickRotation,\n      _format = _ref.format,\n      legend = _ref.legend,\n      _ref$legendPosition = _ref.legendPosition,\n      legendPosition = _ref$legendPosition === void 0 ? 'end' : _ref$legendPosition,\n      _ref$legendOffset = _ref.legendOffset,\n      legendOffset = _ref$legendOffset === void 0 ? 0 : _ref$legendOffset,\n      theme = _ref.theme;\n\n  var _computeCartesianTick = computeCartesianTicks({\n    axis: axis,\n    scale: scale,\n    ticksPosition: ticksPosition,\n    tickValues: tickValues,\n    tickSize: tickSize,\n    tickPadding: tickPadding,\n    tickRotation: tickRotation,\n    engine: 'canvas'\n  }),\n      ticks = _computeCartesianTick.ticks,\n      textAlign = _computeCartesianTick.textAlign,\n      textBaseline = _computeCartesianTick.textBaseline;\n\n  ctx.save();\n  ctx.translate(x, y);\n  ctx.textAlign = textAlign;\n  ctx.textBaseline = textBaseline;\n  ctx.font = \"\".concat(theme.axis.ticks.text.fontWeight ? \"\".concat(theme.axis.ticks.text.fontWeight, \" \") : '').concat(theme.axis.ticks.text.fontSize, \"px \").concat(theme.axis.ticks.text.fontFamily);\n\n  if (((_theme$axis$domain$li = theme.axis.domain.line.strokeWidth) !== null && _theme$axis$domain$li !== void 0 ? _theme$axis$domain$li : 0) > 0) {\n    ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth);\n    ctx.lineCap = 'square';\n\n    if (theme.axis.domain.line.stroke) {\n      ctx.strokeStyle = theme.axis.domain.line.stroke;\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length);\n    ctx.stroke();\n  }\n\n  var format = typeof _format === 'function' ? _format : function (value) {\n    return \"\".concat(value);\n  };\n  ticks.forEach(function (tick) {\n    var _theme$axis$ticks$lin;\n\n    if (((_theme$axis$ticks$lin = theme.axis.ticks.line.strokeWidth) !== null && _theme$axis$ticks$lin !== void 0 ? _theme$axis$ticks$lin : 0) > 0) {\n      ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth);\n      ctx.lineCap = 'square';\n\n      if (theme.axis.ticks.line.stroke) {\n        ctx.strokeStyle = theme.axis.ticks.line.stroke;\n      }\n\n      ctx.beginPath();\n      ctx.moveTo(tick.x, tick.y);\n      ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY);\n      ctx.stroke();\n    }\n\n    var value = format(tick.value);\n    ctx.save();\n    ctx.translate(tick.x + tick.textX, tick.y + tick.textY);\n    ctx.rotate(degreesToRadians(tickRotation));\n\n    if (theme.axis.ticks.text.fill) {\n      ctx.fillStyle = theme.axis.ticks.text.fill;\n    }\n\n    ctx.fillText(String(value), 0, 0);\n    ctx.restore();\n  });\n\n  if (legend !== undefined) {\n    var legendX = 0;\n    var legendY = 0;\n    var legendRotation = 0;\n    var _textAlign = 'center';\n\n    if (axis === 'y') {\n      legendRotation = -90;\n      legendX = legendOffset;\n\n      if (legendPosition === 'start') {\n        _textAlign = 'start';\n        legendY = length;\n      } else if (legendPosition === 'middle') {\n        _textAlign = 'center';\n        legendY = length / 2;\n      } else if (legendPosition === 'end') {\n        _textAlign = 'end';\n      }\n    } else {\n      legendY = legendOffset;\n\n      if (legendPosition === 'start') {\n        _textAlign = 'start';\n      } else if (legendPosition === 'middle') {\n        _textAlign = 'center';\n        legendX = length / 2;\n      } else if (legendPosition === 'end') {\n        _textAlign = 'end';\n        legendX = length;\n      }\n    }\n\n    ctx.translate(legendX, legendY);\n    ctx.rotate(degreesToRadians(legendRotation));\n    ctx.font = \"\".concat(theme.axis.legend.text.fontWeight ? \"\".concat(theme.axis.legend.text.fontWeight, \" \") : '').concat(theme.axis.legend.text.fontSize, \"px \").concat(theme.axis.legend.text.fontFamily);\n\n    if (theme.axis.legend.text.fill) {\n      ctx.fillStyle = theme.axis.legend.text.fill;\n    }\n\n    ctx.textAlign = _textAlign;\n    ctx.textBaseline = 'middle';\n    ctx.fillText(legend, 0, 0);\n  }\n\n  ctx.restore();\n};\n\nvar renderAxesToCanvas = function renderAxesToCanvas(ctx, _ref2) {\n  var xScale = _ref2.xScale,\n      yScale = _ref2.yScale,\n      width = _ref2.width,\n      height = _ref2.height,\n      top = _ref2.top,\n      right = _ref2.right,\n      bottom = _ref2.bottom,\n      left = _ref2.left,\n      theme = _ref2.theme;\n  var axes = {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n  positions.forEach(function (position) {\n    var axis = axes[position];\n    if (!axis) return null;\n    var isXAxis = position === 'top' || position === 'bottom';\n    var ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after';\n    var scale = isXAxis ? xScale : yScale;\n    var format = getFormatter(axis.format, scale);\n    renderAxisToCanvas(ctx, _objectSpread2(_objectSpread2({}, axis), {}, {\n      axis: isXAxis ? 'x' : 'y',\n      x: position === 'right' ? width : 0,\n      y: position === 'bottom' ? height : 0,\n      scale: scale,\n      format: format,\n      length: isXAxis ? width : height,\n      ticksPosition: ticksPosition,\n      theme: theme\n    }));\n  });\n};\n\nvar renderGridLinesToCanvas = function renderGridLinesToCanvas(ctx, _ref3) {\n  var width = _ref3.width,\n      height = _ref3.height,\n      scale = _ref3.scale,\n      axis = _ref3.axis,\n      values = _ref3.values;\n  var lines = computeGridLines({\n    width: width,\n    height: height,\n    scale: scale,\n    axis: axis,\n    values: values\n  });\n  lines.forEach(function (line) {\n    ctx.beginPath();\n    ctx.moveTo(line.x1, line.y1);\n    ctx.lineTo(line.x2, line.y2);\n    ctx.stroke();\n  });\n};\n\nexport { Axes, memoizedAxis as Axis, memoizedAxisTick as AxisTick, Grid, GridLine, GridLines, axisPropType, axisPropTypes, positions, renderAxesToCanvas, renderAxisToCanvas, renderGridLinesToCanvas };","map":{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../src/compute.ts","../src/components/AxisTick.tsx","../src/components/Axis.tsx","../src/props.ts","../src/components/Axes.tsx","../src/components/GridLine.tsx","../src/components/GridLines.tsx","../src/components/Grid.tsx","../src/canvas.ts"],"names":["defineProperty","isArray","Array","computeCartesianTicks","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","textAlign","textBaseline","translate","x","y","ticks","key","value","getFormatter","formatter","timeFormat","d","d3Format","computeGridLines","width","height","_values","lineValues","lines","x1","x2","y1","y2","AxisTick","_value","format","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","transform","memoizedAxisTick","memo","Axis","length","renderTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","dominantBaseline","animate","springConfig","useMotionConfig","useSpring","lineX2","lineY2","config","immediate","transition","useTransition","keys","tick","initial","textTransform","from","enter","update","leave","tickIndex","rotate","transitionProps","memoizedAxis","axisPropTypes","PropTypes","bool","axisPropType","positions","Axes","xScale","yScale","top","right","bottom","left","axes","isXAxis","GridLine","_jsx","GridLines","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","_format","ctx","Number","degreesToRadians","String","renderAxesToCanvas","renderGridLinesToCanvas"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return (d3Format(format) as unknown) as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProp, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProp<X> | null\n        right?: CanvasAxisProp<Y> | null\n        bottom?: CanvasAxisProp<X> | null\n        left?: CanvasAxisProp<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProp<X> | undefined\n            : CanvasAxisProp<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"]},"metadata":{},"sourceType":"module"}