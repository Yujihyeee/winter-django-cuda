{"ast":null,"code":"import { useState, useCallback, createElement, useMemo } from 'react';\nimport { useTheme } from '@nivo/core';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport PropTypes from 'prop-types';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar isObject = function isObject(item) {\n  return typeof item === 'object' && !Array.isArray(item) && item !== null;\n};\n\nvar zeroPadding = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\n\nvar computeDimensions = function computeDimensions(_ref) {\n  var direction = _ref.direction,\n      itemsSpacing = _ref.itemsSpacing,\n      _padding = _ref.padding,\n      itemCount = _ref.itemCount,\n      itemWidth = _ref.itemWidth,\n      itemHeight = _ref.itemHeight;\n\n  if (typeof _padding !== 'number' && !isObject(_padding)) {\n    throw new Error('Invalid property padding, must be one of: number, object');\n  }\n\n  var padding = typeof _padding === 'number' ? {\n    top: _padding,\n    right: _padding,\n    bottom: _padding,\n    left: _padding\n  } : _objectSpread2(_objectSpread2({}, zeroPadding), _padding);\n  var horizontalPadding = padding.left + padding.right;\n  var verticalPadding = padding.top + padding.bottom;\n  var width = itemWidth + horizontalPadding;\n  var height = itemHeight + verticalPadding;\n  var spacing = (itemCount - 1) * itemsSpacing;\n\n  if (direction === 'row') {\n    width = itemWidth * itemCount + spacing + horizontalPadding;\n  } else if (direction === 'column') {\n    height = itemHeight * itemCount + spacing + verticalPadding;\n  }\n\n  return {\n    width: width,\n    height: height,\n    padding: padding\n  };\n};\n\nvar computePositionFromAnchor = function computePositionFromAnchor(_ref2) {\n  var anchor = _ref2.anchor,\n      translateX = _ref2.translateX,\n      translateY = _ref2.translateY,\n      containerWidth = _ref2.containerWidth,\n      containerHeight = _ref2.containerHeight,\n      width = _ref2.width,\n      height = _ref2.height;\n  var x = translateX;\n  var y = translateY;\n\n  switch (anchor) {\n    case 'top':\n      x += (containerWidth - width) / 2;\n      break;\n\n    case 'top-right':\n      x += containerWidth - width;\n      break;\n\n    case 'right':\n      x += containerWidth - width;\n      y += (containerHeight - height) / 2;\n      break;\n\n    case 'bottom-right':\n      x += containerWidth - width;\n      y += containerHeight - height;\n      break;\n\n    case 'bottom':\n      x += (containerWidth - width) / 2;\n      y += containerHeight - height;\n      break;\n\n    case 'bottom-left':\n      y += containerHeight - height;\n      break;\n\n    case 'left':\n      y += (containerHeight - height) / 2;\n      break;\n\n    case 'center':\n      x += (containerWidth - width) / 2;\n      y += (containerHeight - height) / 2;\n      break;\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n};\n\nvar computeItemLayout = function computeItemLayout(_ref3) {\n  var direction = _ref3.direction,\n      justify = _ref3.justify,\n      symbolSize = _ref3.symbolSize,\n      symbolSpacing = _ref3.symbolSpacing,\n      width = _ref3.width,\n      height = _ref3.height;\n  var symbolX;\n  var symbolY;\n  var labelX;\n  var labelY;\n  var labelAnchor;\n  var labelAlignment;\n\n  switch (direction) {\n    case 'left-to-right':\n      symbolX = 0;\n      symbolY = (height - symbolSize) / 2;\n      labelY = height / 2;\n      labelAlignment = 'central';\n\n      if (justify === true) {\n        labelX = width;\n        labelAnchor = 'end';\n      } else {\n        labelX = symbolSize + symbolSpacing;\n        labelAnchor = 'start';\n      }\n\n      break;\n\n    case 'right-to-left':\n      symbolX = width - symbolSize;\n      symbolY = (height - symbolSize) / 2;\n      labelY = height / 2;\n      labelAlignment = 'central';\n\n      if (justify === true) {\n        labelX = 0;\n        labelAnchor = 'start';\n      } else {\n        labelX = width - symbolSize - symbolSpacing;\n        labelAnchor = 'end';\n      }\n\n      break;\n\n    case 'top-to-bottom':\n      symbolX = (width - symbolSize) / 2;\n      symbolY = 0;\n      labelX = width / 2;\n      labelAnchor = 'middle';\n\n      if (justify === true) {\n        labelY = height;\n        labelAlignment = 'alphabetic';\n      } else {\n        labelY = symbolSize + symbolSpacing;\n        labelAlignment = 'text-before-edge';\n      }\n\n      break;\n\n    case 'bottom-to-top':\n      symbolX = (width - symbolSize) / 2;\n      symbolY = height - symbolSize;\n      labelX = width / 2;\n      labelAnchor = 'middle';\n\n      if (justify === true) {\n        labelY = 0;\n        labelAlignment = 'text-before-edge';\n      } else {\n        labelY = height - symbolSize - symbolSpacing;\n        labelAlignment = 'alphabetic';\n      }\n\n      break;\n  }\n\n  return {\n    symbolX: symbolX,\n    symbolY: symbolY,\n    labelX: labelX,\n    labelY: labelY,\n    labelAnchor: labelAnchor,\n    labelAlignment: labelAlignment\n  };\n};\n\nvar SymbolCircle = function SymbolCircle(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      size = _ref.size,\n      fill = _ref.fill,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? 0 : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? 'transparent' : _ref$borderColor;\n  return jsx(\"circle\", {\n    r: size / 2,\n    cx: x + size / 2,\n    cy: y + size / 2,\n    fill: fill,\n    opacity: opacity,\n    strokeWidth: borderWidth,\n    stroke: borderColor,\n    style: {\n      pointerEvents: 'none'\n    }\n  });\n};\n\nvar SymbolDiamond = function SymbolDiamond(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      size = _ref.size,\n      fill = _ref.fill,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? 0 : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? 'transparent' : _ref$borderColor;\n  return jsx(\"g\", {\n    transform: \"translate(\".concat(x, \",\").concat(y, \")\"),\n    children: jsx(\"path\", {\n      d: \"\\n                    M\".concat(size / 2, \" 0\\n                    L\").concat(size * 0.8, \" \").concat(size / 2, \"\\n                    L\").concat(size / 2, \" \").concat(size, \"\\n                    L\").concat(size * 0.2, \" \").concat(size / 2, \"\\n                    L\").concat(size / 2, \" 0\\n                \"),\n      fill: fill,\n      opacity: opacity,\n      strokeWidth: borderWidth,\n      stroke: borderColor,\n      style: {\n        pointerEvents: 'none'\n      }\n    })\n  });\n};\n\nvar SymbolSquare = function SymbolSquare(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      size = _ref.size,\n      fill = _ref.fill,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? 0 : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? 'transparent' : _ref$borderColor;\n  return jsx(\"rect\", {\n    x: x,\n    y: y,\n    fill: fill,\n    opacity: opacity,\n    strokeWidth: borderWidth,\n    stroke: borderColor,\n    width: size,\n    height: size,\n    style: {\n      pointerEvents: 'none'\n    }\n  });\n};\n\nvar SymbolTriangle = function SymbolTriangle(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      size = _ref.size,\n      fill = _ref.fill,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? 0 : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? 'transparent' : _ref$borderColor;\n  return jsx(\"g\", {\n    transform: \"translate(\".concat(x, \",\").concat(y, \")\"),\n    children: jsx(\"path\", {\n      d: \"\\n                M\".concat(size / 2, \" 0\\n                L\").concat(size, \" \").concat(size, \"\\n                L0 \").concat(size, \"\\n                L\").concat(size / 2, \" 0\\n            \"),\n      fill: fill,\n      opacity: opacity,\n      strokeWidth: borderWidth,\n      stroke: borderColor,\n      style: {\n        pointerEvents: 'none'\n      }\n    })\n  });\n};\n\nvar symbolByShape = {\n  circle: SymbolCircle,\n  diamond: SymbolDiamond,\n  square: SymbolSquare,\n  triangle: SymbolTriangle\n};\n\nvar LegendSvgItem = function LegendSvgItem(_ref) {\n  var _style$symbolSize, _style$itemOpacity, _style$itemBackground, _style$symbolSize2, _ref4, _data$fill, _style$symbolBorderWi, _style$symbolBorderCo, _ref5, _ref6, _style$itemTextColor;\n\n  var x = _ref.x,\n      y = _ref.y,\n      width = _ref.width,\n      height = _ref.height,\n      data = _ref.data,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === void 0 ? 'left-to-right' : _ref$direction,\n      _ref$justify = _ref.justify,\n      justify = _ref$justify === void 0 ? false : _ref$justify,\n      textColor = _ref.textColor,\n      _ref$background = _ref.background,\n      background = _ref$background === void 0 ? 'transparent' : _ref$background,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$symbolShape = _ref.symbolShape,\n      symbolShape = _ref$symbolShape === void 0 ? 'square' : _ref$symbolShape,\n      _ref$symbolSize = _ref.symbolSize,\n      symbolSize = _ref$symbolSize === void 0 ? 16 : _ref$symbolSize,\n      _ref$symbolSpacing = _ref.symbolSpacing,\n      symbolSpacing = _ref$symbolSpacing === void 0 ? 8 : _ref$symbolSpacing,\n      _ref$symbolBorderWidt = _ref.symbolBorderWidth,\n      symbolBorderWidth = _ref$symbolBorderWidt === void 0 ? 0 : _ref$symbolBorderWidt,\n      _ref$symbolBorderColo = _ref.symbolBorderColor,\n      symbolBorderColor = _ref$symbolBorderColo === void 0 ? 'transparent' : _ref$symbolBorderColo,\n      _onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      toggleSerie = _ref.toggleSerie,\n      effects = _ref.effects;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      style = _useState2[0],\n      setStyle = _useState2[1];\n\n  var theme = useTheme();\n  var handleMouseEnter = useCallback(function (event) {\n    if (effects) {\n      var applyEffects = effects.filter(function (_ref2) {\n        var on = _ref2.on;\n        return on === 'hover';\n      });\n\n      var _style = applyEffects.reduce(function (acc, effect) {\n        return _objectSpread2(_objectSpread2({}, acc), effect.style);\n      }, {});\n\n      setStyle(_style);\n    }\n\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(data, event);\n  }, [onMouseEnter, data, effects]);\n  var handleMouseLeave = useCallback(function (event) {\n    if (effects) {\n      var applyEffects = effects.filter(function (_ref3) {\n        var on = _ref3.on;\n        return on !== 'hover';\n      });\n\n      var _style2 = applyEffects.reduce(function (acc, effect) {\n        return _objectSpread2(_objectSpread2({}, acc), effect.style);\n      }, {});\n\n      setStyle(_style2);\n    }\n\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(data, event);\n  }, [onMouseLeave, data, effects]);\n\n  var _computeItemLayout = computeItemLayout({\n    direction: direction,\n    justify: justify,\n    symbolSize: (_style$symbolSize = style.symbolSize) !== null && _style$symbolSize !== void 0 ? _style$symbolSize : symbolSize,\n    symbolSpacing: symbolSpacing,\n    width: width,\n    height: height\n  }),\n      symbolX = _computeItemLayout.symbolX,\n      symbolY = _computeItemLayout.symbolY,\n      labelX = _computeItemLayout.labelX,\n      labelY = _computeItemLayout.labelY,\n      labelAnchor = _computeItemLayout.labelAnchor,\n      labelAlignment = _computeItemLayout.labelAlignment;\n\n  var isInteractive = [_onClick, onMouseEnter, onMouseLeave, toggleSerie].some(function (handler) {\n    return handler !== undefined;\n  });\n  var SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape];\n  return jsxs(\"g\", {\n    transform: \"translate(\".concat(x, \",\").concat(y, \")\"),\n    style: {\n      opacity: (_style$itemOpacity = style.itemOpacity) !== null && _style$itemOpacity !== void 0 ? _style$itemOpacity : opacity\n    },\n    children: [jsx(\"rect\", {\n      width: width,\n      height: height,\n      fill: (_style$itemBackground = style.itemBackground) !== null && _style$itemBackground !== void 0 ? _style$itemBackground : background,\n      style: {\n        cursor: isInteractive ? 'pointer' : 'auto'\n      },\n      onClick: function onClick(event) {\n        _onClick === null || _onClick === void 0 ? void 0 : _onClick(data, event);\n        toggleSerie === null || toggleSerie === void 0 ? void 0 : toggleSerie(data.id);\n      },\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave\n    }), createElement(SymbolShape, _objectSpread2({\n      id: data.id,\n      x: symbolX,\n      y: symbolY,\n      size: (_style$symbolSize2 = style.symbolSize) !== null && _style$symbolSize2 !== void 0 ? _style$symbolSize2 : symbolSize,\n      fill: (_ref4 = (_data$fill = data.fill) !== null && _data$fill !== void 0 ? _data$fill : data.color) !== null && _ref4 !== void 0 ? _ref4 : 'black',\n      borderWidth: (_style$symbolBorderWi = style.symbolBorderWidth) !== null && _style$symbolBorderWi !== void 0 ? _style$symbolBorderWi : symbolBorderWidth,\n      borderColor: (_style$symbolBorderCo = style.symbolBorderColor) !== null && _style$symbolBorderCo !== void 0 ? _style$symbolBorderCo : symbolBorderColor\n    }, data.hidden ? theme.legends.hidden.symbol : undefined)), jsx(\"text\", {\n      textAnchor: labelAnchor,\n      style: _objectSpread2(_objectSpread2({}, theme.legends.text), {}, {\n        fill: (_ref5 = (_ref6 = (_style$itemTextColor = style.itemTextColor) !== null && _style$itemTextColor !== void 0 ? _style$itemTextColor : textColor) !== null && _ref6 !== void 0 ? _ref6 : theme.legends.text.fill) !== null && _ref5 !== void 0 ? _ref5 : 'black',\n        dominantBaseline: labelAlignment,\n        pointerEvents: 'none',\n        userSelect: 'none'\n      }, data.hidden ? theme.legends.hidden.text : undefined),\n      x: labelX,\n      y: labelY,\n      children: data.label\n    })]\n  });\n};\n\nvar LegendSvg = function LegendSvg(_ref) {\n  var data = _ref.data,\n      x = _ref.x,\n      y = _ref.y,\n      direction = _ref.direction,\n      _ref$padding = _ref.padding,\n      _padding = _ref$padding === void 0 ? 0 : _ref$padding,\n      justify = _ref.justify,\n      effects = _ref.effects,\n      itemWidth = _ref.itemWidth,\n      itemHeight = _ref.itemHeight,\n      _ref$itemDirection = _ref.itemDirection,\n      itemDirection = _ref$itemDirection === void 0 ? 'left-to-right' : _ref$itemDirection,\n      _ref$itemsSpacing = _ref.itemsSpacing,\n      itemsSpacing = _ref$itemsSpacing === void 0 ? 0 : _ref$itemsSpacing,\n      itemTextColor = _ref.itemTextColor,\n      _ref$itemBackground = _ref.itemBackground,\n      itemBackground = _ref$itemBackground === void 0 ? 'transparent' : _ref$itemBackground,\n      _ref$itemOpacity = _ref.itemOpacity,\n      itemOpacity = _ref$itemOpacity === void 0 ? 1 : _ref$itemOpacity,\n      symbolShape = _ref.symbolShape,\n      symbolSize = _ref.symbolSize,\n      symbolSpacing = _ref.symbolSpacing,\n      symbolBorderWidth = _ref.symbolBorderWidth,\n      symbolBorderColor = _ref.symbolBorderColor,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      toggleSerie = _ref.toggleSerie;\n\n  var _computeDimensions = computeDimensions({\n    itemCount: data.length,\n    itemWidth: itemWidth,\n    itemHeight: itemHeight,\n    itemsSpacing: itemsSpacing,\n    direction: direction,\n    padding: _padding\n  }),\n      padding = _computeDimensions.padding;\n\n  var xStep = direction === 'row' ? itemWidth + itemsSpacing : 0;\n  var yStep = direction === 'column' ? itemHeight + itemsSpacing : 0;\n  return jsx(\"g\", {\n    transform: \"translate(\".concat(x, \",\").concat(y, \")\"),\n    children: data.map(function (data, i) {\n      return jsx(LegendSvgItem, {\n        data: data,\n        x: i * xStep + padding.left,\n        y: i * yStep + padding.top,\n        width: itemWidth,\n        height: itemHeight,\n        direction: itemDirection,\n        justify: justify,\n        effects: effects,\n        textColor: itemTextColor,\n        background: itemBackground,\n        opacity: itemOpacity,\n        symbolShape: symbolShape,\n        symbolSize: symbolSize,\n        symbolSpacing: symbolSpacing,\n        symbolBorderWidth: symbolBorderWidth,\n        symbolBorderColor: symbolBorderColor,\n        onClick: onClick,\n        onMouseEnter: onMouseEnter,\n        onMouseLeave: onMouseLeave,\n        toggleSerie: toggleSerie\n      }, i);\n    })\n  });\n};\n\nvar BoxLegendSvg = function BoxLegendSvg(_ref) {\n  var data = _ref.data,\n      containerWidth = _ref.containerWidth,\n      containerHeight = _ref.containerHeight,\n      _ref$translateX = _ref.translateX,\n      translateX = _ref$translateX === void 0 ? 0 : _ref$translateX,\n      _ref$translateY = _ref.translateY,\n      translateY = _ref$translateY === void 0 ? 0 : _ref$translateY,\n      anchor = _ref.anchor,\n      direction = _ref.direction,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 0 : _ref$padding,\n      justify = _ref.justify,\n      _ref$itemsSpacing = _ref.itemsSpacing,\n      itemsSpacing = _ref$itemsSpacing === void 0 ? 0 : _ref$itemsSpacing,\n      itemWidth = _ref.itemWidth,\n      itemHeight = _ref.itemHeight,\n      itemDirection = _ref.itemDirection,\n      itemTextColor = _ref.itemTextColor,\n      itemBackground = _ref.itemBackground,\n      itemOpacity = _ref.itemOpacity,\n      symbolShape = _ref.symbolShape,\n      symbolSize = _ref.symbolSize,\n      symbolSpacing = _ref.symbolSpacing,\n      symbolBorderWidth = _ref.symbolBorderWidth,\n      symbolBorderColor = _ref.symbolBorderColor,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      toggleSerie = _ref.toggleSerie,\n      effects = _ref.effects;\n\n  var _computeDimensions = computeDimensions({\n    itemCount: data.length,\n    itemsSpacing: itemsSpacing,\n    itemWidth: itemWidth,\n    itemHeight: itemHeight,\n    direction: direction,\n    padding: padding\n  }),\n      width = _computeDimensions.width,\n      height = _computeDimensions.height;\n\n  var _computePositionFromA = computePositionFromAnchor({\n    anchor: anchor,\n    translateX: translateX,\n    translateY: translateY,\n    containerWidth: containerWidth,\n    containerHeight: containerHeight,\n    width: width,\n    height: height\n  }),\n      x = _computePositionFromA.x,\n      y = _computePositionFromA.y;\n\n  return jsx(LegendSvg, {\n    data: data,\n    x: x,\n    y: y,\n    direction: direction,\n    padding: padding,\n    justify: justify,\n    effects: effects,\n    itemsSpacing: itemsSpacing,\n    itemWidth: itemWidth,\n    itemHeight: itemHeight,\n    itemDirection: itemDirection,\n    itemTextColor: itemTextColor,\n    itemBackground: itemBackground,\n    itemOpacity: itemOpacity,\n    symbolShape: symbolShape,\n    symbolSize: symbolSize,\n    symbolSpacing: symbolSpacing,\n    symbolBorderWidth: symbolBorderWidth,\n    symbolBorderColor: symbolBorderColor,\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    toggleSerie: typeof toggleSerie === 'boolean' ? undefined : toggleSerie\n  });\n};\n\nvar textAlignMapping = {\n  start: 'left',\n  middle: 'center',\n  end: 'right'\n};\n\nvar renderLegendToCanvas = function renderLegendToCanvas(ctx, _ref) {\n  var data = _ref.data,\n      containerWidth = _ref.containerWidth,\n      containerHeight = _ref.containerHeight,\n      _ref$translateX = _ref.translateX,\n      translateX = _ref$translateX === void 0 ? 0 : _ref$translateX,\n      _ref$translateY = _ref.translateY,\n      translateY = _ref$translateY === void 0 ? 0 : _ref$translateY,\n      anchor = _ref.anchor,\n      direction = _ref.direction,\n      _ref$padding = _ref.padding,\n      _padding = _ref$padding === void 0 ? 0 : _ref$padding,\n      _ref$justify = _ref.justify,\n      justify = _ref$justify === void 0 ? false : _ref$justify,\n      _ref$itemsSpacing = _ref.itemsSpacing,\n      itemsSpacing = _ref$itemsSpacing === void 0 ? 0 : _ref$itemsSpacing,\n      itemWidth = _ref.itemWidth,\n      itemHeight = _ref.itemHeight,\n      _ref$itemDirection = _ref.itemDirection,\n      itemDirection = _ref$itemDirection === void 0 ? 'left-to-right' : _ref$itemDirection,\n      itemTextColor = _ref.itemTextColor,\n      _ref$symbolSize = _ref.symbolSize,\n      symbolSize = _ref$symbolSize === void 0 ? 16 : _ref$symbolSize,\n      _ref$symbolSpacing = _ref.symbolSpacing,\n      symbolSpacing = _ref$symbolSpacing === void 0 ? 8 : _ref$symbolSpacing,\n      theme = _ref.theme;\n\n  var _computeDimensions = computeDimensions({\n    itemCount: data.length,\n    itemWidth: itemWidth,\n    itemHeight: itemHeight,\n    itemsSpacing: itemsSpacing,\n    direction: direction,\n    padding: _padding\n  }),\n      width = _computeDimensions.width,\n      height = _computeDimensions.height,\n      padding = _computeDimensions.padding;\n\n  var _computePositionFromA = computePositionFromAnchor({\n    anchor: anchor,\n    translateX: translateX,\n    translateY: translateY,\n    containerWidth: containerWidth,\n    containerHeight: containerHeight,\n    width: width,\n    height: height\n  }),\n      x = _computePositionFromA.x,\n      y = _computePositionFromA.y;\n\n  var xStep = direction === 'row' ? itemWidth + itemsSpacing : 0;\n  var yStep = direction === 'column' ? itemHeight + itemsSpacing : 0;\n  ctx.save();\n  ctx.translate(x, y);\n  ctx.font = \"\".concat(theme.legends.text.fontSize, \"px \").concat(theme.legends.text.fontFamily || 'sans-serif');\n  data.forEach(function (d, i) {\n    var _d$color, _ref2;\n\n    var itemX = i * xStep + padding.left;\n    var itemY = i * yStep + padding.top;\n\n    var _computeItemLayout = computeItemLayout({\n      direction: itemDirection,\n      justify: justify,\n      symbolSize: symbolSize,\n      symbolSpacing: symbolSpacing,\n      width: itemWidth,\n      height: itemHeight\n    }),\n        symbolX = _computeItemLayout.symbolX,\n        symbolY = _computeItemLayout.symbolY,\n        labelX = _computeItemLayout.labelX,\n        labelY = _computeItemLayout.labelY,\n        labelAnchor = _computeItemLayout.labelAnchor,\n        labelAlignment = _computeItemLayout.labelAlignment;\n\n    ctx.fillStyle = (_d$color = d.color) !== null && _d$color !== void 0 ? _d$color : 'black';\n    ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize);\n    ctx.textAlign = textAlignMapping[labelAnchor];\n\n    if (labelAlignment === 'central') {\n      ctx.textBaseline = 'middle';\n    }\n\n    ctx.fillStyle = (_ref2 = itemTextColor !== null && itemTextColor !== void 0 ? itemTextColor : theme.legends.text.fill) !== null && _ref2 !== void 0 ? _ref2 : 'black';\n    ctx.fillText(String(d.label), itemX + labelX, itemY + labelY);\n  });\n  ctx.restore();\n};\n\nvar useQuantizeColorScaleLegendData = function useQuantizeColorScaleLegendData(_ref) {\n  var scale = _ref.scale,\n      overriddenDomain = _ref.domain,\n      _ref$reverse = _ref.reverse,\n      reverse = _ref$reverse === void 0 ? false : _ref$reverse,\n      _ref$valueFormat = _ref.valueFormat,\n      valueFormat = _ref$valueFormat === void 0 ? function (v) {\n    return v;\n  } : _ref$valueFormat,\n      _ref$separator = _ref.separator,\n      separator = _ref$separator === void 0 ? ' - ' : _ref$separator;\n  return useMemo(function () {\n    var domain = overriddenDomain !== null && overriddenDomain !== void 0 ? overriddenDomain : scale.range();\n    var items = domain.map(function (domainValue, index) {\n      var _scale$invertExtent = scale.invertExtent(domainValue),\n          _scale$invertExtent2 = _slicedToArray(_scale$invertExtent, 2),\n          start = _scale$invertExtent2[0],\n          end = _scale$invertExtent2[1];\n\n      return {\n        id: domainValue,\n        index: index,\n        extent: [start, end],\n        label: \"\".concat(valueFormat(start)).concat(separator).concat(valueFormat(end)),\n        value: scale(start),\n        color: domainValue\n      };\n    });\n    if (reverse === true) items.reverse();\n    return items;\n  }, [overriddenDomain, scale, reverse]);\n};\n\nvar LegendPropShape = {\n  data: PropTypes.arrayOf(PropTypes.object),\n  anchor: PropTypes.oneOf(['top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', 'center']).isRequired,\n  translateX: PropTypes.number,\n  translateY: PropTypes.number,\n  direction: PropTypes.oneOf(['row', 'column']).isRequired,\n  itemsSpacing: PropTypes.number,\n  itemWidth: PropTypes.number.isRequired,\n  itemHeight: PropTypes.number.isRequired,\n  itemDirection: PropTypes.oneOf(['left-to-right', 'right-to-left', 'top-to-bottom', 'bottom-to-top']),\n  itemTextColor: PropTypes.string,\n  itemBackground: PropTypes.string,\n  itemOpacity: PropTypes.number,\n  symbolShape: PropTypes.oneOfType([PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']), PropTypes.func]),\n  symbolSize: PropTypes.number,\n  symbolSpacing: PropTypes.number,\n  symbolBorderWidth: PropTypes.number,\n  symbolBorderColor: PropTypes.string,\n  onClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  effects: PropTypes.arrayOf(PropTypes.shape({\n    on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n    style: PropTypes.shape({\n      itemTextColor: PropTypes.string,\n      itemBackground: PropTypes.string,\n      itemOpacity: PropTypes.number,\n      symbolSize: PropTypes.number,\n      symbolBorderWidth: PropTypes.number,\n      symbolBorderColor: PropTypes.string\n    }).isRequired\n  }))\n};\nexport { BoxLegendSvg, LegendPropShape, LegendSvg, LegendSvgItem, renderLegendToCanvas, useQuantizeColorScaleLegendData };","map":{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../src/compute.ts","../src/svg/symbols/SymbolCircle.tsx","../src/svg/symbols/SymbolDiamond.tsx","../src/svg/symbols/SymbolSquare.tsx","../src/svg/symbols/SymbolTriangle.tsx","../src/svg/LegendSvgItem.tsx","../src/svg/LegendSvg.tsx","../src/svg/BoxLegendSvg.tsx","../src/canvas.ts","../src/hooks.ts","../src/props.ts"],"names":["defineProperty","arrayLikeToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","isObject","Array","item","zeroPadding","top","right","bottom","left","computeDimensions","direction","itemsSpacing","padding","_padding","itemCount","itemWidth","itemHeight","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","x","y","computeItemLayout","justify","symbolSize","symbolSpacing","symbolX","symbolY","labelY","labelAlignment","labelX","labelAnchor","SymbolCircle","size","fill","opacity","borderWidth","borderColor","pointerEvents","SymbolDiamond","SymbolSquare","SymbolTriangle","symbolByShape","circle","diamond","square","triangle","LegendSvgItem","data","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","style","setStyle","useState","theme","useTheme","handleMouseEnter","useCallback","applyEffects","on","effect","handleMouseLeave","isInteractive","handler","SymbolShape","cursor","id","dominantBaseline","userSelect","label","LegendSvg","itemDirection","itemTextColor","itemBackground","itemOpacity","xStep","yStep","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","itemX","itemY","d","String","useQuantizeColorScaleLegendData","scale","domain","overriddenDomain","reverse","valueFormat","separator","useMemo","items","index","extent","value","color","domainValue","LegendPropShape","PropTypes","string","isRequired"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"]},"metadata":{},"sourceType":"module"}