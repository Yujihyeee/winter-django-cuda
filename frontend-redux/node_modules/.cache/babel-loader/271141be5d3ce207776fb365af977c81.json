{"ast":null,"code":"import { useMemo, createElement, memo, useState, useCallback, Fragment as Fragment$1 } from 'react';\nimport { useTheme, useMotionConfig, useAnimatedPath, positionFromAngle, radiansToDegrees, usePropertyAccessor, DotsItem, useValueFormatter, useCurveInterpolation, Container, useDimensions, SvgWrapper, ResponsiveWrapper } from '@nivo/core';\nimport { BoxLegendSvg } from '@nivo/legends';\nimport { useSpring, animated, useSprings, to } from '@react-spring/web';\nimport { lineRadial, curveLinearClosed, arc } from 'd3-shape';\nimport { useInheritedColor, getInheritedColorGenerator, useOrdinalColorScale } from '@nivo/colors';\nimport { jsx, Fragment, jsxs } from 'react/jsx-runtime';\nimport { useTooltip, Chip, TableTooltip } from '@nivo/tooltip';\nimport { scaleLinear } from 'd3-scale';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar RadarLayer = function RadarLayer(_ref) {\n  var data = _ref.data,\n      key = _ref.item,\n      colorByKey = _ref.colorByKey,\n      radiusScale = _ref.radiusScale,\n      angleStep = _ref.angleStep,\n      curveFactory = _ref.curveFactory,\n      borderWidth = _ref.borderWidth,\n      borderColor = _ref.borderColor,\n      fillOpacity = _ref.fillOpacity,\n      blendMode = _ref.blendMode;\n  var theme = useTheme();\n  var getBorderColor = useInheritedColor(borderColor, theme);\n  var lineGenerator = useMemo(function () {\n    return lineRadial().radius(function (d) {\n      return radiusScale(d);\n    }).angle(function (_, i) {\n      return i * angleStep;\n    }).curve(curveFactory);\n  }, [radiusScale, angleStep, curveFactory]);\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var animatedPath = useAnimatedPath(lineGenerator(data.map(function (d) {\n    return d[key];\n  })));\n  var animatedProps = useSpring({\n    fill: colorByKey[key],\n    stroke: getBorderColor({\n      key: key,\n      color: colorByKey[key]\n    }),\n    config: springConfig,\n    immediate: !animate\n  });\n  return jsx(animated.path, {\n    d: animatedPath,\n    fill: animatedProps.fill,\n    fillOpacity: fillOpacity,\n    stroke: animatedProps.stroke,\n    strokeWidth: borderWidth,\n    style: {\n      mixBlendMode: blendMode\n    }\n  }, key);\n};\n\nvar textAnchorFromAngle = function textAnchorFromAngle(_angle) {\n  var angle = radiansToDegrees(_angle) + 90;\n  if (angle <= 10 || angle >= 350 || angle >= 170 && angle <= 190) return 'middle';\n  if (angle > 180) return 'end';\n  return 'start';\n};\n\nvar RadarGridLabels = function RadarGridLabels(_ref) {\n  var radius = _ref.radius,\n      angles = _ref.angles,\n      indices = _ref.indices,\n      labelComponent = _ref.label,\n      labelOffset = _ref.labelOffset;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var labels = indices.map(function (index, i) {\n    var position = positionFromAngle(angles[i], radius + labelOffset);\n    var textAnchor = textAnchorFromAngle(angles[i]);\n    return _objectSpread2({\n      id: index,\n      angle: radiansToDegrees(angles[i]),\n      anchor: textAnchor\n    }, position);\n  });\n  var springs = useSprings(labels.length, labels.map(function (label) {\n    return {\n      transform: \"translate(\".concat(label.x, \", \").concat(label.y, \")\"),\n      config: springConfig,\n      immediate: !animate\n    };\n  }));\n  return jsx(Fragment, {\n    children: springs.map(function (animatedProps, index) {\n      var label = labels[index];\n      return createElement(labelComponent, {\n        key: label.id,\n        id: label.id,\n        anchor: label.anchor,\n        angle: label.angle,\n        x: label.x,\n        y: label.y,\n        animated: animatedProps\n      });\n    })\n  });\n};\n\nvar RadarGridLevelCircular = memo(function (_ref) {\n  var radius = _ref.radius;\n  var theme = useTheme();\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var animatedProps = useSpring({\n    radius: radius,\n    config: springConfig,\n    immediate: !animate\n  });\n  return jsx(animated.circle, _objectSpread2({\n    fill: \"none\",\n    r: to(animatedProps.radius, function (value) {\n      return Math.max(value, 0);\n    })\n  }, theme.grid.line));\n});\n\nvar RadarGridLevelLinear = function RadarGridLevelLinear(_ref2) {\n  var radius = _ref2.radius,\n      angleStep = _ref2.angleStep,\n      dataLength = _ref2.dataLength;\n  var theme = useTheme();\n  var radarLineGenerator = useMemo(function () {\n    return lineRadial().angle(function (i) {\n      return i * angleStep;\n    }).radius(radius).curve(curveLinearClosed);\n  }, [angleStep, radius]);\n  var points = Array.from({\n    length: dataLength\n  }, function (_, i) {\n    return i;\n  });\n  var animatedPath = useAnimatedPath(radarLineGenerator(points));\n  return jsx(animated.path, _objectSpread2({\n    fill: \"none\",\n    d: animatedPath\n  }, theme.grid.line));\n};\n\nvar RadarGridLevels = function RadarGridLevels(_ref3) {\n  var shape = _ref3.shape,\n      props = _objectWithoutProperties(_ref3, [\"shape\"]);\n\n  return shape === 'circular' ? jsx(RadarGridLevelCircular, {\n    radius: props.radius\n  }) : jsx(RadarGridLevelLinear, _objectSpread2({}, props));\n};\n\nvar RadarGrid = function RadarGrid(_ref) {\n  var indices = _ref.indices,\n      levels = _ref.levels,\n      shape = _ref.shape,\n      radius = _ref.radius,\n      angleStep = _ref.angleStep,\n      label = _ref.label,\n      labelOffset = _ref.labelOffset;\n  var theme = useTheme();\n\n  var _useMemo = useMemo(function () {\n    return {\n      radii: Array.from({\n        length: levels\n      }).map(function (_, i) {\n        return radius / levels * (i + 1);\n      }).reverse(),\n      angles: Array.from({\n        length: indices.length\n      }, function (_, i) {\n        return i * angleStep - Math.PI / 2;\n      })\n    };\n  }, [indices, levels, radius, angleStep]),\n      radii = _useMemo.radii,\n      angles = _useMemo.angles;\n\n  return jsxs(Fragment, {\n    children: [angles.map(function (angle, i) {\n      var position = positionFromAngle(angle, radius);\n      return jsx(\"line\", _objectSpread2({\n        x1: 0,\n        y1: 0,\n        x2: position.x,\n        y2: position.y\n      }, theme.grid.line), \"axis.\".concat(i));\n    }), radii.map(function (radius, i) {\n      return jsx(RadarGridLevels, {\n        shape: shape,\n        radius: radius,\n        angleStep: angleStep,\n        dataLength: indices.length\n      }, \"level.\".concat(i));\n    }), jsx(RadarGridLabels, {\n      radius: radius,\n      angles: angles,\n      indices: indices,\n      labelOffset: labelOffset,\n      label: label\n    })]\n  });\n};\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar RadarSlice = function RadarSlice(_ref) {\n  var datum = _ref.datum,\n      keys = _ref.keys,\n      index = _ref.index,\n      formatValue = _ref.formatValue,\n      colorByKey = _ref.colorByKey,\n      radius = _ref.radius,\n      startAngle = _ref.startAngle,\n      endAngle = _ref.endAngle,\n      arcGenerator = _ref.arcGenerator,\n      tooltip = _ref.tooltip;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isHover = _useState2[0],\n      setIsHover = _useState2[1];\n\n  var theme = useTheme();\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var tooltipData = useMemo(function () {\n    var data = keys.map(function (key) {\n      return {\n        color: colorByKey[key],\n        id: key,\n        value: datum[key],\n        formattedValue: formatValue(datum[key], key)\n      };\n    });\n    data.sort(function (a, b) {\n      return a.value - b.value;\n    });\n    data.reverse();\n    return data;\n  }, [datum, keys, formatValue, colorByKey]);\n  var showItemTooltip = useCallback(function (event) {\n    setIsHover(true);\n    showTooltipFromEvent(createElement(tooltip, {\n      index: index,\n      data: tooltipData\n    }), event);\n  }, [showTooltipFromEvent, tooltip, index, tooltipData]);\n  var hideItemTooltip = useCallback(function () {\n    setIsHover(false);\n    hideTooltip();\n  }, [hideTooltip, setIsHover]);\n\n  var _useMemo = useMemo(function () {\n    var position = positionFromAngle(startAngle + (endAngle - startAngle) * 0.5 - Math.PI / 2, radius);\n    return {\n      path: arcGenerator({\n        startAngle: startAngle,\n        endAngle: endAngle\n      }),\n      tipX: position.x,\n      tipY: position.y\n    };\n  }, [startAngle, endAngle, radius, arcGenerator]),\n      path = _useMemo.path,\n      tipX = _useMemo.tipX,\n      tipY = _useMemo.tipY;\n\n  return jsxs(Fragment, {\n    children: [isHover && jsx(\"line\", {\n      x1: 0,\n      y1: 0,\n      x2: tipX,\n      y2: tipY,\n      style: theme.crosshair.line\n    }), jsx(\"path\", {\n      d: path,\n      fill: \"#F00\",\n      fillOpacity: 0,\n      onMouseEnter: showItemTooltip,\n      onMouseMove: showItemTooltip,\n      onMouseLeave: hideItemTooltip\n    })]\n  });\n};\n\nvar RadarSlices = function RadarSlices(_ref) {\n  var data = _ref.data,\n      keys = _ref.keys,\n      getIndex = _ref.getIndex,\n      formatValue = _ref.formatValue,\n      colorByKey = _ref.colorByKey,\n      radius = _ref.radius,\n      angleStep = _ref.angleStep,\n      tooltip = _ref.tooltip;\n  var arc$1 = arc().outerRadius(radius).innerRadius(0);\n  var halfAngleStep = angleStep * 0.5;\n  var rootStartAngle = -halfAngleStep;\n  return jsx(Fragment, {\n    children: data.map(function (d) {\n      var index = getIndex(d);\n      var startAngle = rootStartAngle;\n      var endAngle = startAngle + angleStep;\n      rootStartAngle += angleStep;\n      return jsx(RadarSlice, {\n        datum: d,\n        keys: keys,\n        index: index,\n        formatValue: formatValue,\n        colorByKey: colorByKey,\n        startAngle: startAngle,\n        endAngle: endAngle,\n        radius: radius,\n        arcGenerator: arc$1,\n        tooltip: tooltip\n      }, index);\n    })\n  });\n};\n\nvar RadarDots = function RadarDots(_ref) {\n  var data = _ref.data,\n      keys = _ref.keys,\n      getIndex = _ref.getIndex,\n      colorByKey = _ref.colorByKey,\n      radiusScale = _ref.radiusScale,\n      angleStep = _ref.angleStep,\n      symbol = _ref.symbol,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 6 : _ref$size,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? {\n    from: 'color'\n  } : _ref$color,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? 0 : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? {\n    from: 'color'\n  } : _ref$borderColor,\n      _ref$enableLabel = _ref.enableLabel,\n      enableLabel = _ref$enableLabel === void 0 ? false : _ref$enableLabel,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? 'value' : _ref$label,\n      formatValue = _ref.formatValue,\n      labelYOffset = _ref.labelYOffset;\n  var theme = useTheme();\n  var fillColor = getInheritedColorGenerator(color, theme);\n  var strokeColor = getInheritedColorGenerator(borderColor, theme);\n  var getLabel = usePropertyAccessor(label);\n  var points = useMemo(function () {\n    return data.reduce(function (acc, datum, i) {\n      var index = getIndex(datum);\n      keys.forEach(function (key) {\n        var value = datum[key];\n        var pointData = {\n          index: index,\n          key: key,\n          value: value,\n          formattedValue: formatValue(value, key),\n          color: colorByKey[key]\n        };\n        acc.push({\n          key: \"\".concat(key, \".\").concat(index),\n          label: enableLabel ? getLabel(pointData) : undefined,\n          style: _objectSpread2({\n            fill: fillColor(pointData),\n            stroke: strokeColor(pointData)\n          }, positionFromAngle(angleStep * i - Math.PI / 2, radiusScale(datum[key]))),\n          data: pointData\n        });\n      });\n      return acc;\n    }, []);\n  }, [data, keys, getIndex, colorByKey, enableLabel, getLabel, formatValue, fillColor, strokeColor, angleStep, radiusScale]);\n  return jsx(Fragment, {\n    children: points.map(function (point) {\n      return jsx(DotsItem, {\n        x: point.style.x,\n        y: point.style.y,\n        symbol: symbol,\n        size: size,\n        color: point.style.fill,\n        borderWidth: borderWidth,\n        borderColor: point.style.stroke,\n        label: point.label,\n        labelYOffset: labelYOffset,\n        datum: point.data\n      }, point.key);\n    })\n  });\n};\n\nvar RadarGridLabel = function RadarGridLabel(_ref) {\n  var id = _ref.id,\n      anchor = _ref.anchor,\n      animatedProps = _ref.animated;\n  var theme = useTheme();\n  return jsx(animated.g, {\n    transform: animatedProps.transform,\n    children: jsx(\"text\", {\n      style: theme.axis.ticks.text,\n      dominantBaseline: \"central\",\n      textAnchor: anchor,\n      children: id\n    })\n  });\n};\n\nvar RadarSliceTooltip = function RadarSliceTooltip(_ref) {\n  var index = _ref.index,\n      data = _ref.data;\n  var rows = useMemo(function () {\n    return data.map(function (datum) {\n      return [jsx(Chip, {\n        color: datum.color\n      }, datum.id), datum.id, datum.formattedValue];\n    });\n  }, [data]);\n  return jsx(TableTooltip, {\n    title: jsx(\"strong\", {\n      children: index\n    }),\n    rows: rows\n  });\n};\n\nvar svgDefaultProps = {\n  layers: ['grid', 'layers', 'slices', 'dots', 'legends'],\n  maxValue: 'auto',\n  curve: 'linearClosed',\n  borderWidth: 2,\n  borderColor: {\n    from: 'color'\n  },\n  gridLevels: 5,\n  gridShape: 'circular',\n  gridLabelOffset: 16,\n  gridLabel: RadarGridLabel,\n  enableDots: true,\n  dotSize: 6,\n  dotColor: {\n    from: 'color'\n  },\n  dotBorderWidth: 0,\n  dotBorderColor: {\n    from: 'color'\n  },\n  enableDotLabel: false,\n  dotLabel: 'formattedValue',\n  dotLabelYOffset: -12,\n  colors: {\n    scheme: 'nivo'\n  },\n  fillOpacity: 0.25,\n  blendMode: 'normal',\n  isInteractive: true,\n  sliceTooltip: RadarSliceTooltip,\n  legends: [],\n  role: 'img',\n  animate: true,\n  motionConfig: 'gentle'\n};\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nvar useRadar = function useRadar(_ref) {\n  var data = _ref.data,\n      keys = _ref.keys,\n      indexBy = _ref.indexBy,\n      maxValue = _ref.maxValue,\n      valueFormat = _ref.valueFormat,\n      curve = _ref.curve,\n      width = _ref.width,\n      height = _ref.height,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? svgDefaultProps.colors : _ref$colors,\n      legends = _ref.legends;\n  var getIndex = usePropertyAccessor(indexBy);\n  var indices = useMemo(function () {\n    return data.map(getIndex);\n  }, [data, getIndex]);\n  var formatValue = useValueFormatter(valueFormat);\n  var getColor = useOrdinalColorScale(colors, 'key');\n  var colorByKey = useMemo(function () {\n    return keys.reduce(function (mapping, key, index) {\n      mapping[key] = getColor({\n        key: key,\n        index: index\n      });\n      return mapping;\n    }, {});\n  }, [keys, getColor]);\n\n  var _useMemo = useMemo(function () {\n    var allValues = data.reduce(function (acc, d) {\n      return [].concat(_toConsumableArray(acc), _toConsumableArray(keys.map(function (key) {\n        return d[key];\n      })));\n    }, []);\n    var computedMaxValue = maxValue !== 'auto' ? maxValue : Math.max.apply(Math, _toConsumableArray(allValues));\n    var radius = Math.min(width, height) / 2;\n    var radiusScale = scaleLinear().range([0, radius]).domain([0, computedMaxValue]);\n    return {\n      radius: radius,\n      radiusScale: radiusScale,\n      centerX: width / 2,\n      centerY: height / 2,\n      angleStep: Math.PI * 2 / data.length\n    };\n  }, [keys, data, maxValue, width, height]),\n      radius = _useMemo.radius,\n      radiusScale = _useMemo.radiusScale,\n      centerX = _useMemo.centerX,\n      centerY = _useMemo.centerY,\n      angleStep = _useMemo.angleStep;\n\n  var curveFactory = useCurveInterpolation(curve);\n  var customLayerProps = useMemo(function () {\n    return {\n      data: data,\n      keys: keys,\n      indices: indices,\n      colorByKey: colorByKey,\n      centerX: centerX,\n      centerY: centerY,\n      radiusScale: radiusScale,\n      angleStep: angleStep\n    };\n  }, [data, keys, indices, colorByKey, centerX, centerY, radiusScale, angleStep]);\n  var legendData = useMemo(function () {\n    return keys.map(function (key) {\n      return {\n        id: key,\n        label: key,\n        color: colorByKey[key]\n      };\n    });\n  }, [keys, colorByKey]);\n  var boundLegends = useMemo(function () {\n    return legends.map(function (_ref2) {\n      var customData = _ref2.data,\n          legend = _objectWithoutProperties(_ref2, [\"data\"]);\n\n      var boundData = customData === null || customData === void 0 ? void 0 : customData.map(function (cd) {\n        var findData = legendData.find(function (ld) {\n          return ld.id === cd.id;\n        }) || {};\n        return _objectSpread2(_objectSpread2({}, findData), cd);\n      });\n      return _objectSpread2(_objectSpread2({}, legend), {}, {\n        data: boundData || legendData\n      });\n    });\n  }, [legends, legendData]);\n  return {\n    getIndex: getIndex,\n    indices: indices,\n    formatValue: formatValue,\n    colorByKey: colorByKey,\n    radius: radius,\n    radiusScale: radiusScale,\n    centerX: centerX,\n    centerY: centerY,\n    angleStep: angleStep,\n    curveFactory: curveFactory,\n    legendData: legendData,\n    boundLegends: boundLegends,\n    customLayerProps: customLayerProps\n  };\n};\n\nvar InnerRadar = function InnerRadar(_ref) {\n  var data = _ref.data,\n      keys = _ref.keys,\n      indexBy = _ref.indexBy,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? svgDefaultProps.layers : _ref$layers,\n      _ref$maxValue = _ref.maxValue,\n      maxValue = _ref$maxValue === void 0 ? svgDefaultProps.maxValue : _ref$maxValue,\n      valueFormat = _ref.valueFormat,\n      _ref$curve = _ref.curve,\n      curve = _ref$curve === void 0 ? svgDefaultProps.curve : _ref$curve,\n      partialMargin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? svgDefaultProps.borderWidth : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? svgDefaultProps.borderColor : _ref$borderColor,\n      _ref$gridLevels = _ref.gridLevels,\n      gridLevels = _ref$gridLevels === void 0 ? svgDefaultProps.gridLevels : _ref$gridLevels,\n      _ref$gridShape = _ref.gridShape,\n      gridShape = _ref$gridShape === void 0 ? svgDefaultProps.gridShape : _ref$gridShape,\n      _ref$gridLabel = _ref.gridLabel,\n      gridLabel = _ref$gridLabel === void 0 ? svgDefaultProps.gridLabel : _ref$gridLabel,\n      _ref$gridLabelOffset = _ref.gridLabelOffset,\n      gridLabelOffset = _ref$gridLabelOffset === void 0 ? svgDefaultProps.gridLabelOffset : _ref$gridLabelOffset,\n      _ref$enableDots = _ref.enableDots,\n      enableDots = _ref$enableDots === void 0 ? svgDefaultProps.enableDots : _ref$enableDots,\n      dotSymbol = _ref.dotSymbol,\n      _ref$dotSize = _ref.dotSize,\n      dotSize = _ref$dotSize === void 0 ? svgDefaultProps.dotSize : _ref$dotSize,\n      _ref$dotColor = _ref.dotColor,\n      dotColor = _ref$dotColor === void 0 ? svgDefaultProps.dotColor : _ref$dotColor,\n      _ref$dotBorderWidth = _ref.dotBorderWidth,\n      dotBorderWidth = _ref$dotBorderWidth === void 0 ? svgDefaultProps.dotBorderWidth : _ref$dotBorderWidth,\n      _ref$dotBorderColor = _ref.dotBorderColor,\n      dotBorderColor = _ref$dotBorderColor === void 0 ? svgDefaultProps.dotBorderColor : _ref$dotBorderColor,\n      _ref$enableDotLabel = _ref.enableDotLabel,\n      enableDotLabel = _ref$enableDotLabel === void 0 ? svgDefaultProps.enableDotLabel : _ref$enableDotLabel,\n      _ref$dotLabel = _ref.dotLabel,\n      dotLabel = _ref$dotLabel === void 0 ? svgDefaultProps.dotLabel : _ref$dotLabel,\n      _ref$dotLabelYOffset = _ref.dotLabelYOffset,\n      dotLabelYOffset = _ref$dotLabelYOffset === void 0 ? svgDefaultProps.dotLabelYOffset : _ref$dotLabelYOffset,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? svgDefaultProps.colors : _ref$colors,\n      _ref$fillOpacity = _ref.fillOpacity,\n      fillOpacity = _ref$fillOpacity === void 0 ? svgDefaultProps.fillOpacity : _ref$fillOpacity,\n      _ref$blendMode = _ref.blendMode,\n      blendMode = _ref$blendMode === void 0 ? svgDefaultProps.blendMode : _ref$blendMode,\n      _ref$isInteractive = _ref.isInteractive,\n      isInteractive = _ref$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref$isInteractive,\n      _ref$sliceTooltip = _ref.sliceTooltip,\n      sliceTooltip = _ref$sliceTooltip === void 0 ? svgDefaultProps.sliceTooltip : _ref$sliceTooltip,\n      _ref$legends = _ref.legends,\n      legends = _ref$legends === void 0 ? svgDefaultProps.legends : _ref$legends,\n      role = _ref.role,\n      ariaLabel = _ref.ariaLabel,\n      ariaLabelledBy = _ref.ariaLabelledBy,\n      ariaDescribedBy = _ref.ariaDescribedBy;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useRadar = useRadar({\n    data: data,\n    keys: keys,\n    indexBy: indexBy,\n    maxValue: maxValue,\n    valueFormat: valueFormat,\n    curve: curve,\n    width: innerWidth,\n    height: innerHeight,\n    colors: colors,\n    legends: legends\n  }),\n      getIndex = _useRadar.getIndex,\n      indices = _useRadar.indices,\n      formatValue = _useRadar.formatValue,\n      colorByKey = _useRadar.colorByKey,\n      radius = _useRadar.radius,\n      radiusScale = _useRadar.radiusScale,\n      centerX = _useRadar.centerX,\n      centerY = _useRadar.centerY,\n      angleStep = _useRadar.angleStep,\n      curveFactory = _useRadar.curveFactory,\n      boundLegends = _useRadar.boundLegends,\n      customLayerProps = _useRadar.customLayerProps;\n\n  var layerById = {\n    grid: null,\n    layers: null,\n    slices: null,\n    dots: null,\n    legends: null\n  };\n\n  if (layers.includes('grid')) {\n    layerById.grid = jsx(\"g\", {\n      transform: \"translate(\".concat(centerX, \", \").concat(centerY, \")\"),\n      children: jsx(RadarGrid, {\n        levels: gridLevels,\n        shape: gridShape,\n        radius: radius,\n        angleStep: angleStep,\n        indices: indices,\n        label: gridLabel,\n        labelOffset: gridLabelOffset\n      })\n    }, \"grid\");\n  }\n\n  if (layers.includes('layers')) {\n    layerById.layers = jsx(\"g\", {\n      transform: \"translate(\".concat(centerX, \", \").concat(centerY, \")\"),\n      children: keys.map(function (key) {\n        return jsx(RadarLayer, {\n          data: data,\n          item: key,\n          colorByKey: colorByKey,\n          radiusScale: radiusScale,\n          angleStep: angleStep,\n          curveFactory: curveFactory,\n          borderWidth: borderWidth,\n          borderColor: borderColor,\n          fillOpacity: fillOpacity,\n          blendMode: blendMode\n        }, key);\n      })\n    }, \"layers\");\n  }\n\n  if (layers.includes('slices') && isInteractive) {\n    layerById.slices = jsx(\"g\", {\n      transform: \"translate(\".concat(centerX, \", \").concat(centerY, \")\"),\n      children: jsx(RadarSlices, {\n        data: data,\n        keys: keys,\n        getIndex: getIndex,\n        formatValue: formatValue,\n        colorByKey: colorByKey,\n        radius: radius,\n        angleStep: angleStep,\n        tooltip: sliceTooltip\n      })\n    }, \"slices\");\n  }\n\n  if (layers.includes('dots') && enableDots) {\n    layerById.dots = jsx(\"g\", {\n      transform: \"translate(\".concat(centerX, \", \").concat(centerY, \")\"),\n      children: jsx(RadarDots, {\n        data: data,\n        keys: keys,\n        getIndex: getIndex,\n        radiusScale: radiusScale,\n        angleStep: angleStep,\n        symbol: dotSymbol,\n        size: dotSize,\n        colorByKey: colorByKey,\n        color: dotColor,\n        borderWidth: dotBorderWidth,\n        borderColor: dotBorderColor,\n        enableLabel: enableDotLabel,\n        label: dotLabel,\n        formatValue: formatValue,\n        labelYOffset: dotLabelYOffset\n      })\n    }, \"dots\");\n  }\n\n  if (layers.includes('legends')) {\n    layerById.legends = jsx(Fragment$1, {\n      children: boundLegends.map(function (legend, i) {\n        return jsx(BoxLegendSvg, _objectSpread2(_objectSpread2({}, legend), {}, {\n          containerWidth: width,\n          containerHeight: height\n        }), i);\n      })\n    }, \"legends\");\n  }\n\n  return jsx(SvgWrapper, {\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    role: role,\n    ariaLabel: ariaLabel,\n    ariaLabelledBy: ariaLabelledBy,\n    ariaDescribedBy: ariaDescribedBy,\n    children: layers.map(function (layer, i) {\n      var _layerById$layer;\n\n      if (typeof layer === 'function') {\n        return jsx(Fragment$1, {\n          children: createElement(layer, customLayerProps)\n        }, i);\n      }\n\n      return (_layerById$layer = layerById === null || layerById === void 0 ? void 0 : layerById[layer]) !== null && _layerById$layer !== void 0 ? _layerById$layer : null;\n    })\n  });\n};\n\nvar Radar = function Radar(_ref2) {\n  var _ref2$isInteractive = _ref2.isInteractive,\n      isInteractive = _ref2$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref2$isInteractive,\n      _ref2$animate = _ref2.animate,\n      animate = _ref2$animate === void 0 ? svgDefaultProps.animate : _ref2$animate,\n      _ref2$motionConfig = _ref2.motionConfig,\n      motionConfig = _ref2$motionConfig === void 0 ? svgDefaultProps.motionConfig : _ref2$motionConfig,\n      theme = _ref2.theme,\n      renderWrapper = _ref2.renderWrapper,\n      otherProps = _objectWithoutProperties(_ref2, [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"]);\n\n  return jsx(Container, {\n    animate: animate,\n    isInteractive: isInteractive,\n    motionConfig: motionConfig,\n    renderWrapper: renderWrapper,\n    theme: theme,\n    children: jsx(InnerRadar, _objectSpread2({\n      isInteractive: isInteractive\n    }, otherProps))\n  });\n};\n\nvar ResponsiveRadar = function ResponsiveRadar(props) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(Radar, _objectSpread2({\n        width: width,\n        height: height\n      }, props));\n    }\n  });\n};\n\nexport { Radar, RadarDots, ResponsiveRadar, svgDefaultProps };","map":{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../src/RadarLayer.tsx","../src/RadarGridLabels.tsx","../src/RadarGridLevels.tsx","../src/RadarGrid.tsx","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../src/RadarSlice.tsx","../src/RadarSlices.tsx","../src/RadarDots.tsx","../src/RadarGridLabel.tsx","../src/RadarSliceTooltip.tsx","../src/props.ts","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../src/hooks.ts","../src/Radar.tsx","../src/ResponsiveRadar.tsx"],"names":["objectWithoutPropertiesLoose","defineProperty","RadarLayer","data","item","key","colorByKey","radiusScale","angleStep","curveFactory","borderWidth","borderColor","fillOpacity","blendMode","theme","useTheme","getBorderColor","useInheritedColor","lineGenerator","useMemo","i","animate","springConfig","useMotionConfig","animatedPath","useAnimatedPath","d","animatedProps","useSpring","fill","stroke","color","config","immediate","mixBlendMode","textAnchorFromAngle","angle","radiansToDegrees","RadarGridLabels","radius","angles","indices","label","labelComponent","labelOffset","labels","position","positionFromAngle","textAnchor","id","anchor","springs","useSprings","transform","createElement","x","y","animated","RadarGridLevelCircular","memo","to","Math","RadarGridLevelLinear","dataLength","radarLineGenerator","points","length","RadarGridLevels","shape","props","_jsx","RadarGrid","levels","radii","arrayLikeToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","RadarSlice","datum","keys","index","formatValue","startAngle","endAngle","arcGenerator","tooltip","isHover","setIsHover","useState","showTooltipFromEvent","hideTooltip","useTooltip","tooltipData","value","formattedValue","a","b","showItemTooltip","useCallback","hideItemTooltip","path","tipX","tipY","line","RadarSlices","getIndex","arc","d3Arc","halfAngleStep","rootStartAngle","RadarDots","symbol","size","from","enableLabel","labelYOffset","fillColor","getInheritedColorGenerator","strokeColor","getLabel","usePropertyAccessor","pointData","acc","style","point","RadarGridLabel","RadarSliceTooltip","rows","svgDefaultProps","layers","maxValue","curve","gridLevels","gridShape","gridLabelOffset","gridLabel","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabel","dotLabelYOffset","colors","scheme","isInteractive","sliceTooltip","legends","role","motionConfig","arrayWithoutHoles","iterableToArray","nonIterableSpread","useRadar","indexBy","valueFormat","width","height","useValueFormatter","getColor","useOrdinalColorScale","mapping","centerX","centerY","allValues","computedMaxValue","scaleLinear","useCurveInterpolation","customLayerProps","legendData","boundLegends","customData","legend","boundData","findData","ld","cd","InnerRadar","margin","partialMargin","dotSymbol","ariaLabel","ariaLabelledBy","ariaDescribedBy","innerWidth","innerHeight","outerWidth","outerHeight","useDimensions","layerById","grid","slices","dots","Radar","renderWrapper","otherProps","ResponsiveRadar"],"mappings":"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","sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { lineRadial, CurveFactory } from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { useMotionConfig, useTheme, useAnimatedPath } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { RadarCommonProps } from './types'\n\ninterface RadarLayerProps<D extends Record<string, unknown>> {\n    data: D[]\n    item: string\n    colorByKey: Record<string | number, string>\n    radiusScale: ScaleLinear<number, number>\n    angleStep: number\n    curveFactory: CurveFactory\n    borderWidth: RadarCommonProps<D>['borderWidth']\n    borderColor: RadarCommonProps<D>['borderColor']\n    fillOpacity: RadarCommonProps<D>['fillOpacity']\n    blendMode: RadarCommonProps<D>['blendMode']\n}\n\nexport const RadarLayer = <D extends Record<string, unknown>>({\n    data,\n    item: key,\n    colorByKey,\n    radiusScale,\n    angleStep,\n    curveFactory,\n    borderWidth,\n    borderColor,\n    fillOpacity,\n    blendMode,\n}: RadarLayerProps<D>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const lineGenerator = useMemo(() => {\n        return lineRadial<number>()\n            .radius(d => radiusScale(d))\n            .angle((_, i) => i * angleStep)\n            .curve(curveFactory)\n    }, [radiusScale, angleStep, curveFactory])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(data.map(d => d[key] as number)) as string)\n    const animatedProps = useSpring<{ fill: string; stroke: string }>({\n        fill: colorByKey[key],\n        stroke: getBorderColor({ key, color: colorByKey[key] }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            key={key}\n            d={animatedPath}\n            fill={animatedProps.fill}\n            fillOpacity={fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={borderWidth}\n            style={{ mixBlendMode: blendMode }}\n        />\n    )\n}\n","import { createElement } from 'react'\nimport { useSprings } from '@react-spring/web'\nimport { useMotionConfig, positionFromAngle, radiansToDegrees } from '@nivo/core'\nimport { GridLabelComponent } from './types'\n\nconst textAnchorFromAngle = (_angle: number) => {\n    const angle = radiansToDegrees(_angle) + 90\n\n    if (angle <= 10 || angle >= 350 || (angle >= 170 && angle <= 190)) return 'middle' as const\n    if (angle > 180) return 'end' as const\n    return 'start' as const\n}\n\ninterface RadarGridLabelsProps {\n    radius: number\n    angles: number[]\n    indices: string[]\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGridLabels = ({\n    radius,\n    angles,\n    indices,\n    label: labelComponent,\n    labelOffset,\n}: RadarGridLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = indices.map((index, i) => {\n        const position = positionFromAngle(angles[i], radius + labelOffset)\n        const textAnchor = textAnchorFromAngle(angles[i])\n\n        return {\n            id: index,\n            angle: radiansToDegrees(angles[i]),\n            anchor: textAnchor,\n            ...position,\n        }\n    })\n\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y})`,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return createElement(labelComponent, {\n                    key: label.id,\n                    id: label.id,\n                    anchor: label.anchor,\n                    angle: label.angle,\n                    x: label.x,\n                    y: label.y,\n                    animated: animatedProps,\n                })\n            })}\n        </>\n    )\n}\n","import { memo, SVGProps, useMemo } from 'react'\nimport { lineRadial, curveLinearClosed } from 'd3-shape'\nimport { animated, useSpring, to } from '@react-spring/web'\nimport { useTheme, useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { RadarCommonProps } from './types'\n\ninterface RadarGridLevelCircularProps {\n    radius: number\n}\n\nconst RadarGridLevelCircular = memo(({ radius }: RadarGridLevelCircularProps) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        radius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            fill=\"none\"\n            r={to(animatedProps.radius, value => Math.max(value, 0))}\n            {...(theme.grid.line as Omit<SVGProps<SVGCircleElement>, 'ref'>)}\n        />\n    )\n})\n\ninterface RadarGridLevelLinearProps {\n    radius: number\n    angleStep: number\n    dataLength: number\n}\n\nconst RadarGridLevelLinear = ({ radius, angleStep, dataLength }: RadarGridLevelLinearProps) => {\n    const theme = useTheme()\n\n    const radarLineGenerator = useMemo(\n        () =>\n            lineRadial<number>()\n                .angle(i => i * angleStep)\n                .radius(radius)\n                .curve(curveLinearClosed),\n        [angleStep, radius]\n    )\n\n    const points = Array.from({ length: dataLength }, (_, i) => i)\n    const animatedPath = useAnimatedPath(radarLineGenerator(points) as string)\n\n    return (\n        <animated.path\n            fill=\"none\"\n            d={animatedPath}\n            {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n        />\n    )\n}\n\ninterface RadarGridLevelsProps<D extends Record<string, unknown>> {\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    angleStep: number\n    dataLength: number\n}\n\nexport const RadarGridLevels = <D extends Record<string, unknown>>({\n    shape,\n    ...props\n}: RadarGridLevelsProps<D>) => {\n    return shape === 'circular' ? (\n        <RadarGridLevelCircular radius={props.radius} />\n    ) : (\n        <RadarGridLevelLinear {...props} />\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { RadarGridLabels } from './RadarGridLabels'\nimport { RadarGridLevels } from './RadarGridLevels'\nimport { GridLabelComponent, RadarCommonProps } from './types'\n\ninterface RadarGridProps<D extends Record<string, unknown>> {\n    indices: string[]\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    levels: number\n    angleStep: number\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGrid = <D extends Record<string, unknown>>({\n    indices,\n    levels,\n    shape,\n    radius,\n    angleStep,\n    label,\n    labelOffset,\n}: RadarGridProps<D>) => {\n    const theme = useTheme()\n    const { radii, angles } = useMemo(() => {\n        return {\n            radii: Array.from({ length: levels })\n                .map((_, i) => (radius / levels) * (i + 1))\n                .reverse(),\n            angles: Array.from({ length: indices.length }, (_, i) => i * angleStep - Math.PI / 2),\n        }\n    }, [indices, levels, radius, angleStep])\n\n    return (\n        <>\n            {angles.map((angle, i) => {\n                const position = positionFromAngle(angle, radius)\n                return (\n                    <line\n                        key={`axis.${i}`}\n                        x1={0}\n                        y1={0}\n                        x2={position.x}\n                        y2={position.y}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                )\n            })}\n            {radii.map((radius, i) => (\n                <RadarGridLevels<D>\n                    key={`level.${i}`}\n                    shape={shape}\n                    radius={radius}\n                    angleStep={angleStep}\n                    dataLength={indices.length}\n                />\n            ))}\n            <RadarGridLabels\n                radius={radius}\n                angles={angles}\n                indices={indices}\n                labelOffset={labelOffset}\n                label={label}\n            />\n        </>\n    )\n}\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import { useMemo, useState, useCallback, createElement } from 'react'\nimport { Arc } from 'd3-shape'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { RadarCommonProps, RadarDataProps, RadarSliceTooltipDatum } from './types'\n\ninterface RadarSliceProps<D extends Record<string, unknown>> {\n    datum: D\n    keys: RadarDataProps<D>['keys']\n    index: string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: Record<string, string>\n    startAngle: number\n    endAngle: number\n    radius: number\n    arcGenerator: Arc<void, { startAngle: number; endAngle: number }>\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlice = <D extends Record<string, unknown>>({\n    datum,\n    keys,\n    index,\n    formatValue,\n    colorByKey,\n    radius,\n    startAngle,\n    endAngle,\n    arcGenerator,\n    tooltip,\n}: RadarSliceProps<D>) => {\n    const [isHover, setIsHover] = useState(false)\n    const theme = useTheme()\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const tooltipData = useMemo(() => {\n        const data: RadarSliceTooltipDatum[] = keys.map(key => ({\n            color: colorByKey[key],\n            id: key,\n            value: datum[key] as number,\n            formattedValue: formatValue(datum[key] as number, key),\n        }))\n        data.sort((a, b) => a.value - b.value)\n        data.reverse()\n\n        return data\n    }, [datum, keys, formatValue, colorByKey])\n\n    const showItemTooltip = useCallback(\n        event => {\n            setIsHover(true)\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    index,\n                    data: tooltipData,\n                }),\n                event\n            )\n        },\n        [showTooltipFromEvent, tooltip, index, tooltipData]\n    )\n\n    const hideItemTooltip = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [hideTooltip, setIsHover])\n\n    const { path, tipX, tipY } = useMemo(() => {\n        const position = positionFromAngle(\n            startAngle + (endAngle - startAngle) * 0.5 - Math.PI / 2,\n            radius\n        )\n\n        return {\n            path: arcGenerator({ startAngle, endAngle }) as string,\n            tipX: position.x,\n            tipY: position.y,\n        }\n    }, [startAngle, endAngle, radius, arcGenerator])\n\n    return (\n        <>\n            {isHover && <line x1={0} y1={0} x2={tipX} y2={tipY} style={theme.crosshair.line} />}\n            <path\n                d={path}\n                fill=\"#F00\"\n                fillOpacity={0}\n                onMouseEnter={showItemTooltip}\n                onMouseMove={showItemTooltip}\n                onMouseLeave={hideItemTooltip}\n            />\n        </>\n    )\n}\n","import { arc as d3Arc } from 'd3-shape'\nimport { RadarSlice } from './RadarSlice'\nimport { RadarColorMapping, RadarCommonProps, RadarDataProps } from './types'\n\ninterface RadarSlicesProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    getIndex: (d: D) => string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: RadarColorMapping\n    radius: number\n    angleStep: number\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlices = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    formatValue,\n    colorByKey,\n    radius,\n    angleStep,\n    tooltip,\n}: RadarSlicesProps<D>) => {\n    const arc = d3Arc<{ startAngle: number; endAngle: number }>().outerRadius(radius).innerRadius(0)\n\n    const halfAngleStep = angleStep * 0.5\n    let rootStartAngle = -halfAngleStep\n\n    return (\n        <>\n            {data.map(d => {\n                const index = getIndex(d)\n                const startAngle = rootStartAngle\n                const endAngle = startAngle + angleStep\n\n                rootStartAngle += angleStep\n\n                return (\n                    <RadarSlice\n                        key={index}\n                        datum={d}\n                        keys={keys}\n                        index={index}\n                        formatValue={formatValue}\n                        colorByKey={colorByKey}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        radius={radius}\n                        arcGenerator={arc}\n                        tooltip={tooltip}\n                    />\n                )\n            })}\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { ScaleLinear } from 'd3-scale'\nimport { useTheme, positionFromAngle, DotsItem, usePropertyAccessor } from '@nivo/core'\nimport { getInheritedColorGenerator } from '@nivo/colors'\nimport { RadarCommonProps, RadarDataProps, PointProps, PointData, RadarColorMapping } from './types'\n\ninterface RadarDotsProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    radiusScale: ScaleLinear<number, number>\n    getIndex: (d: D) => string\n    colorByKey: RadarColorMapping\n    angleStep: number\n    symbol?: RadarCommonProps<D>['dotSymbol']\n    size: number\n    color: RadarCommonProps<D>['dotColor']\n    borderWidth: number\n    borderColor: RadarCommonProps<D>['dotBorderColor']\n    enableLabel: boolean\n    label: RadarCommonProps<D>['dotLabel']\n    formatValue: (value: number, context: string) => string\n    labelYOffset: number\n}\n\nexport const RadarDots = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    colorByKey,\n    radiusScale,\n    angleStep,\n    symbol,\n    size = 6,\n    color = { from: 'color' },\n    borderWidth = 0,\n    borderColor = { from: 'color' },\n    enableLabel = false,\n    label = 'value',\n    formatValue,\n    labelYOffset,\n}: RadarDotsProps<D>) => {\n    const theme = useTheme()\n    const fillColor = getInheritedColorGenerator(color, theme)\n    const strokeColor = getInheritedColorGenerator(borderColor, theme)\n    const getLabel = usePropertyAccessor<PointData, string | number>(label)\n\n    const points: PointProps[] = useMemo(\n        () =>\n            data.reduce((acc, datum, i) => {\n                const index = getIndex(datum)\n                keys.forEach(key => {\n                    const value = datum[key] as number\n\n                    const pointData: PointData = {\n                        index,\n                        key,\n                        value,\n                        formattedValue: formatValue(value, key),\n                        color: colorByKey[key],\n                    }\n\n                    acc.push({\n                        key: `${key}.${index}`,\n                        label: enableLabel ? getLabel(pointData) : undefined,\n                        style: {\n                            fill: fillColor(pointData),\n                            stroke: strokeColor(pointData),\n                            ...positionFromAngle(\n                                angleStep * i - Math.PI / 2,\n                                radiusScale(datum[key] as number)\n                            ),\n                        },\n                        data: pointData,\n                    })\n                })\n\n                return acc\n            }, [] as PointProps[]),\n        [\n            data,\n            keys,\n            getIndex,\n            colorByKey,\n            enableLabel,\n            getLabel,\n            formatValue,\n            fillColor,\n            strokeColor,\n            angleStep,\n            radiusScale,\n        ]\n    )\n\n    return (\n        <>\n            {points.map(point => (\n                <DotsItem\n                    key={point.key}\n                    x={point.style.x}\n                    y={point.style.y}\n                    symbol={symbol}\n                    size={size}\n                    color={point.style.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.style.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    datum={point.data}\n                />\n            ))}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { GridLabelProps } from './types'\n\nexport const RadarGridLabel = ({ id, anchor, animated: animatedProps }: GridLabelProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <text style={theme.axis.ticks.text} dominantBaseline=\"central\" textAnchor={anchor}>\n                {id}\n            </text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RadarSliceTooltipProps } from './types'\n\nexport const RadarSliceTooltip = ({ index, data }: RadarSliceTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            data.map(datum => [\n                <Chip key={datum.id} color={datum.color} />,\n                datum.id,\n                datum.formattedValue,\n            ]),\n        [data]\n    )\n\n    return <TableTooltip title={<strong>{index}</strong>} rows={rows} />\n}\n","import { RadarGridLabel } from './RadarGridLabel'\nimport { RadarSliceTooltip } from './RadarSliceTooltip'\nimport { RadarLayerId } from './types'\n\nexport const svgDefaultProps = {\n    layers: ['grid', 'layers', 'slices', 'dots', 'legends'] as RadarLayerId[],\n\n    maxValue: 'auto' as const,\n\n    curve: 'linearClosed' as const,\n\n    borderWidth: 2,\n    borderColor: { from: 'color' },\n\n    gridLevels: 5,\n    gridShape: 'circular' as const,\n    gridLabelOffset: 16,\n    gridLabel: RadarGridLabel,\n\n    enableDots: true,\n    dotSize: 6,\n    dotColor: { from: 'color' },\n    dotBorderWidth: 0,\n    dotBorderColor: { from: 'color' },\n    enableDotLabel: false,\n    dotLabel: 'formattedValue',\n    dotLabelYOffset: -12,\n\n    colors: { scheme: 'nivo' as const },\n    fillOpacity: 0.25,\n    blendMode: 'normal' as const,\n\n    isInteractive: true,\n    sliceTooltip: RadarSliceTooltip,\n\n    legends: [],\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n}\n","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport { useCurveInterpolation, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { svgDefaultProps } from './props'\nimport {\n    RadarColorMapping,\n    RadarCommonProps,\n    RadarDataProps,\n    RadarCustomLayerProps,\n    BoundLegendProps,\n} from './types'\n\nexport const useRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    maxValue,\n    valueFormat,\n    curve,\n    width,\n    height,\n    colors = svgDefaultProps.colors,\n    legends,\n}: {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    indexBy: RadarDataProps<D>['indexBy']\n    maxValue: RadarCommonProps<D>['maxValue']\n    valueFormat?: RadarCommonProps<D>['valueFormat']\n    curve: RadarCommonProps<D>['curve']\n    width: number\n    height: number\n    colors: RadarCommonProps<D>['colors']\n    legends: RadarCommonProps<D>['legends']\n}) => {\n    const getIndex = usePropertyAccessor<D, string>(indexBy)\n    const indices = useMemo(() => data.map(getIndex), [data, getIndex])\n    const formatValue = useValueFormatter<number, string>(valueFormat)\n\n    const getColor = useOrdinalColorScale<{ key: string; index: number }>(colors, 'key')\n    const colorByKey: RadarColorMapping = useMemo(\n        () =>\n            keys.reduce<RadarColorMapping>((mapping, key, index) => {\n                mapping[key] = getColor({ key, index })\n                return mapping\n            }, {}),\n        [keys, getColor]\n    )\n\n    const { radius, radiusScale, centerX, centerY, angleStep } = useMemo(() => {\n        const allValues: number[] = data.reduce(\n            (acc: number[], d) => [...acc, ...keys.map(key => d[key] as number)],\n            [] as number[]\n        )\n        const computedMaxValue = maxValue !== 'auto' ? maxValue : Math.max(...allValues)\n\n        const radius = Math.min(width, height) / 2\n        const radiusScale = scaleLinear<number, number>()\n            .range([0, radius])\n            .domain([0, computedMaxValue])\n\n        return {\n            radius,\n            radiusScale,\n            centerX: width / 2,\n            centerY: height / 2,\n            angleStep: (Math.PI * 2) / data.length,\n        }\n    }, [keys, data, maxValue, width, height])\n\n    const curveFactory = useCurveInterpolation(curve)\n\n    const customLayerProps: RadarCustomLayerProps<D> = useMemo(\n        () => ({\n            data,\n            keys,\n            indices,\n            colorByKey,\n            centerX,\n            centerY,\n            radiusScale,\n            angleStep,\n        }),\n        [data, keys, indices, colorByKey, centerX, centerY, radiusScale, angleStep]\n    )\n\n    const legendData = useMemo(\n        () => keys.map(key => ({ id: key, label: key, color: colorByKey[key] })),\n        [keys, colorByKey]\n    )\n\n    const boundLegends: BoundLegendProps[] = useMemo(\n        () =>\n            legends.map(({ data: customData, ...legend }) => {\n                const boundData = customData?.map(cd => {\n                    const findData = legendData.find(ld => ld.id === cd.id) || {}\n                    return { ...findData, ...cd }\n                })\n                return { ...legend, data: boundData || legendData }\n            }),\n        [legends, legendData]\n    )\n\n    return {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        legendData,\n        boundLegends,\n        customLayerProps,\n    }\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { RadarLayer } from './RadarLayer'\nimport { RadarGrid } from './RadarGrid'\nimport { RadarSlices } from './RadarSlices'\nimport { RadarDots } from './RadarDots'\nimport { svgDefaultProps } from './props'\nimport { RadarLayerId, RadarSvgProps } from './types'\nimport { useRadar } from './hooks'\n\ntype InnerRadarProps<D extends Record<string, unknown>> = Omit<\n    RadarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    layers = svgDefaultProps.layers,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    curve = svgDefaultProps.curve,\n    margin: partialMargin,\n    width,\n    height,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    gridLevels = svgDefaultProps.gridLevels,\n    gridShape = svgDefaultProps.gridShape,\n    gridLabel = svgDefaultProps.gridLabel,\n    gridLabelOffset = svgDefaultProps.gridLabelOffset,\n    enableDots = svgDefaultProps.enableDots,\n    dotSymbol,\n    dotSize = svgDefaultProps.dotSize,\n    dotColor = svgDefaultProps.dotColor,\n    dotBorderWidth = svgDefaultProps.dotBorderWidth,\n    dotBorderColor = svgDefaultProps.dotBorderColor,\n    enableDotLabel = svgDefaultProps.enableDotLabel,\n    dotLabel = svgDefaultProps.dotLabel,\n    dotLabelYOffset = svgDefaultProps.dotLabelYOffset,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    blendMode = svgDefaultProps.blendMode,\n    isInteractive = svgDefaultProps.isInteractive,\n    sliceTooltip = svgDefaultProps.sliceTooltip,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerRadarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        boundLegends,\n        customLayerProps,\n    } = useRadar<D>({\n        data,\n        keys,\n        indexBy,\n        maxValue,\n        valueFormat,\n        curve,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        legends,\n    })\n\n    const layerById: Record<RadarLayerId, ReactNode> = {\n        grid: null,\n        layers: null,\n        slices: null,\n        dots: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <g key=\"grid\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarGrid<D>\n                    levels={gridLevels}\n                    shape={gridShape}\n                    radius={radius}\n                    angleStep={angleStep}\n                    indices={indices}\n                    label={gridLabel}\n                    labelOffset={gridLabelOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('layers')) {\n        layerById.layers = (\n            <g key=\"layers\" transform={`translate(${centerX}, ${centerY})`}>\n                {keys.map(key => (\n                    <RadarLayer<D>\n                        key={key}\n                        data={data}\n                        item={key}\n                        colorByKey={colorByKey}\n                        radiusScale={radiusScale}\n                        angleStep={angleStep}\n                        curveFactory={curveFactory}\n                        borderWidth={borderWidth}\n                        borderColor={borderColor}\n                        fillOpacity={fillOpacity}\n                        blendMode={blendMode}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    if (layers.includes('slices') && isInteractive) {\n        layerById.slices = (\n            <g key=\"slices\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarSlices<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    formatValue={formatValue}\n                    colorByKey={colorByKey}\n                    radius={radius}\n                    angleStep={angleStep}\n                    tooltip={sliceTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <g key=\"dots\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarDots<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    radiusScale={radiusScale}\n                    angleStep={angleStep}\n                    symbol={dotSymbol}\n                    size={dotSize}\n                    colorByKey={colorByKey}\n                    color={dotColor}\n                    borderWidth={dotBorderWidth}\n                    borderColor={dotBorderColor}\n                    enableLabel={enableDotLabel}\n                    label={dotLabel}\n                    formatValue={formatValue}\n                    labelYOffset={dotLabelYOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {boundLegends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Radar = <D extends Record<string, unknown>>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadarSvgProps } from './types'\nimport { Radar } from './Radar'\n\nexport const ResponsiveRadar = <D extends Record<string, unknown>>(\n    props: Omit<RadarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Radar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"]},"metadata":{},"sourceType":"module"}