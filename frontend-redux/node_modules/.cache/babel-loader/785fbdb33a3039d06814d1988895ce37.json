{"ast":null,"code":"import { Axes, Grid, renderGridLinesToCanvas, renderAxesToCanvas } from '@nivo/axes';\nimport { useAnnotations, Annotation, useComputedAnnotations, renderAnnotationsToCanvas } from '@nivo/annotations';\nimport { jsx, Fragment, jsxs } from 'react/jsx-runtime';\nimport { BoxLegendSvg, renderLegendToCanvas } from '@nivo/legends';\nimport { useTheme, getPropertyAccessor, usePropertyAccessor, useValueFormatter, Container, useMotionConfig, useDimensions, bindDefs, CartesianMarkers, SvgWrapper, getRelativeCursor, isCursorInRect, ResponsiveWrapper } from '@nivo/core';\nimport { useMemo, createElement, useCallback, useState, Fragment as Fragment$1, forwardRef, useRef, useEffect } from 'react';\nimport { animated, to, useTransition } from '@react-spring/web';\nimport { useTooltip, BasicTooltip } from '@nivo/tooltip';\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors';\nimport { computeScale } from '@nivo/scales';\nimport { stack, stackOffsetDiverging } from 'd3-shape';\nimport _uniqBy from 'lodash/uniqBy';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar BarAnnotations = function BarAnnotations(_ref) {\n  var bars = _ref.bars,\n      annotations = _ref.annotations;\n  var boundAnnotations = useAnnotations({\n    data: bars,\n    annotations: annotations,\n    getPosition: function getPosition(bar) {\n      return {\n        x: bar.x + bar.width / 2,\n        y: bar.y + bar.height / 2\n      };\n    },\n    getDimensions: function getDimensions(_ref2) {\n      var height = _ref2.height,\n          width = _ref2.width;\n      return {\n        width: width,\n        height: height,\n        size: Math.max(width, height)\n      };\n    }\n  });\n  return jsx(Fragment, {\n    children: boundAnnotations.map(function (annotation, i) {\n      return jsx(Annotation, _objectSpread2({}, annotation), i);\n    })\n  });\n};\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar BarLegends = function BarLegends(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      legends = _ref.legends,\n      toggleSerie = _ref.toggleSerie;\n  return jsx(Fragment, {\n    children: legends.map(function (_ref2, i) {\n      var _legend$data;\n\n      var _ref3 = _slicedToArray(_ref2, 2),\n          legend = _ref3[0],\n          data = _ref3[1];\n\n      return jsx(BoxLegendSvg, _objectSpread2(_objectSpread2({}, legend), {}, {\n        containerWidth: width,\n        containerHeight: height,\n        data: (_legend$data = legend.data) !== null && _legend$data !== void 0 ? _legend$data : data,\n        toggleSerie: legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n      }), i);\n    })\n  });\n};\n\nvar BarItem = function BarItem(_ref) {\n  var _data$fill;\n\n  var _ref$bar = _ref.bar,\n      data = _ref$bar.data,\n      bar = _objectWithoutProperties(_ref$bar, [\"data\"]),\n      _ref$style = _ref.style,\n      borderColor = _ref$style.borderColor,\n      color = _ref$style.color,\n      height = _ref$style.height,\n      labelColor = _ref$style.labelColor,\n      labelOpacity = _ref$style.labelOpacity,\n      labelX = _ref$style.labelX,\n      labelY = _ref$style.labelY,\n      transform = _ref$style.transform,\n      width = _ref$style.width,\n      borderRadius = _ref.borderRadius,\n      borderWidth = _ref.borderWidth,\n      label = _ref.label,\n      shouldRenderLabel = _ref.shouldRenderLabel,\n      isInteractive = _ref.isInteractive,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      tooltip = _ref.tooltip,\n      isFocusable = _ref.isFocusable,\n      ariaLabel = _ref.ariaLabel,\n      ariaLabelledBy = _ref.ariaLabelledBy,\n      ariaDescribedBy = _ref.ariaDescribedBy;\n\n  var theme = useTheme();\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      showTooltipAt = _useTooltip.showTooltipAt,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var renderTooltip = useMemo(function () {\n    return function () {\n      return createElement(tooltip, _objectSpread2(_objectSpread2({}, bar), data));\n    };\n  }, [tooltip, bar, data]);\n  var handleClick = useCallback(function (event) {\n    onClick === null || onClick === void 0 ? void 0 : onClick(_objectSpread2({\n      color: bar.color\n    }, data), event);\n  }, [bar, data, onClick]);\n  var handleTooltip = useCallback(function (event) {\n    return showTooltipFromEvent(renderTooltip(), event);\n  }, [showTooltipFromEvent, renderTooltip]);\n  var handleMouseEnter = useCallback(function (event) {\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(data, event);\n    showTooltipFromEvent(renderTooltip(), event);\n  }, [data, onMouseEnter, showTooltipFromEvent, renderTooltip]);\n  var handleMouseLeave = useCallback(function (event) {\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(data, event);\n    hideTooltip();\n  }, [data, hideTooltip, onMouseLeave]);\n  var handleFocus = useCallback(function () {\n    showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY]);\n  }, [showTooltipAt, renderTooltip, bar]);\n  var handleBlur = useCallback(function () {\n    hideTooltip();\n  }, [hideTooltip]);\n  return jsxs(animated.g, {\n    transform: transform,\n    children: [jsx(animated.rect, {\n      width: to(width, function (value) {\n        return Math.max(value, 0);\n      }),\n      height: to(height, function (value) {\n        return Math.max(value, 0);\n      }),\n      rx: borderRadius,\n      ry: borderRadius,\n      fill: (_data$fill = data.fill) !== null && _data$fill !== void 0 ? _data$fill : color,\n      strokeWidth: borderWidth,\n      stroke: borderColor,\n      focusable: isFocusable,\n      tabIndex: isFocusable ? 0 : undefined,\n      \"aria-label\": ariaLabel ? ariaLabel(data) : undefined,\n      \"aria-labelledby\": ariaLabelledBy ? ariaLabelledBy(data) : undefined,\n      \"aria-describedby\": ariaDescribedBy ? ariaDescribedBy(data) : undefined,\n      onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n      onMouseMove: isInteractive ? handleTooltip : undefined,\n      onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n      onClick: isInteractive ? handleClick : undefined,\n      onFocus: isInteractive && isFocusable ? handleFocus : undefined,\n      onBlur: isInteractive && isFocusable ? handleBlur : undefined\n    }), shouldRenderLabel && jsx(animated.text, {\n      x: labelX,\n      y: labelY,\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      fillOpacity: labelOpacity,\n      style: _objectSpread2(_objectSpread2({}, theme.labels.text), {}, {\n        pointerEvents: 'none',\n        fill: labelColor\n      }),\n      children: label\n    })]\n  });\n};\n\nvar BarTooltip = function BarTooltip(_ref) {\n  var color = _ref.color,\n      label = _ref.label,\n      data = _objectWithoutProperties(_ref, [\"color\", \"label\"]);\n\n  return jsx(BasicTooltip, {\n    id: label,\n    value: data.formattedValue,\n    enableChip: true,\n    color: color\n  });\n};\n\nvar _window$devicePixelRa;\n\nvar defaultProps = {\n  indexBy: 'id',\n  keys: ['value'],\n  groupMode: 'stacked',\n  layout: 'vertical',\n  reverse: false,\n  minValue: 'auto',\n  maxValue: 'auto',\n  valueScale: {\n    type: 'linear'\n  },\n  indexScale: {\n    type: 'band',\n    round: true\n  },\n  padding: 0.1,\n  innerPadding: 0,\n  axisBottom: {},\n  axisLeft: {},\n  enableGridX: false,\n  enableGridY: true,\n  enableLabel: true,\n  label: 'formattedValue',\n  labelSkipWidth: 0,\n  labelSkipHeight: 0,\n  labelTextColor: {\n    from: 'theme',\n    theme: 'labels.text.fill'\n  },\n  colorBy: 'id',\n  colors: {\n    scheme: 'nivo'\n  },\n  borderRadius: 0,\n  borderWidth: 0,\n  borderColor: {\n    from: 'color'\n  },\n  isInteractive: true,\n  tooltip: BarTooltip,\n  tooltipLabel: function tooltipLabel(datum) {\n    return \"\".concat(datum.id, \" - \").concat(datum.indexValue);\n  },\n  legends: [],\n  initialHiddenIds: [],\n  annotations: [],\n  markers: []\n};\n\nvar svgDefaultProps = _objectSpread2(_objectSpread2({}, defaultProps), {}, {\n  layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n  barComponent: BarItem,\n  defs: [],\n  fill: [],\n  animate: true,\n  motionConfig: 'default',\n  role: 'img',\n  isFocusable: false\n});\n\nvar canvasDefaultProps = _objectSpread2(_objectSpread2({}, defaultProps), {}, {\n  layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n  pixelRatio: typeof window !== 'undefined' ? (_window$devicePixelRa = window.devicePixelRatio) !== null && _window$devicePixelRa !== void 0 ? _window$devicePixelRa : 1 : 1\n});\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nvar getIndexScale = function getIndexScale(data, getIndex, padding, indexScale, size, axis) {\n  return computeScale(indexScale, {\n    all: data.map(getIndex),\n    min: 0,\n    max: 0\n  }, size, axis).padding(padding);\n};\n\nvar normalizeData = function normalizeData(data, keys) {\n  return data.map(function (item) {\n    return _objectSpread2(_objectSpread2({}, keys.reduce(function (acc, key) {\n      acc[key] = null;\n      return acc;\n    }, {})), item);\n  });\n};\n\nvar filterNullValues = function filterNullValues(data) {\n  return Object.keys(data).reduce(function (acc, key) {\n    if (data[key]) {\n      acc[key] = data[key];\n    }\n\n    return acc;\n  }, {});\n};\n\nvar coerceValue = function coerceValue(value) {\n  return [value, Number(value)];\n};\n\nvar gt = function gt(value, other) {\n  return value > other;\n};\n\nvar lt = function lt(value, other) {\n  return value < other;\n};\n\nvar range = function range(start, end) {\n  return Array.from(' '.repeat(end - start), function (_, index) {\n    return start + index;\n  });\n};\n\nvar clampToZero = function clampToZero(value) {\n  return gt(value, 0) ? 0 : value;\n};\n\nvar zeroIfNotFinite = function zeroIfNotFinite(value) {\n  return isFinite(value) ? value : 0;\n};\n\nvar generateVerticalGroupedBars = function generateVerticalGroupedBars(_ref, barWidth, reverse, yRef) {\n  var data = _ref.data,\n      formatValue = _ref.formatValue,\n      getColor = _ref.getColor,\n      getIndex = _ref.getIndex,\n      getTooltipLabel = _ref.getTooltipLabel,\n      _ref$innerPadding = _ref.innerPadding,\n      innerPadding = _ref$innerPadding === void 0 ? 0 : _ref$innerPadding,\n      keys = _ref.keys,\n      xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      margin = _ref.margin;\n  var compare = reverse ? lt : gt;\n\n  var getY = function getY(d) {\n    var _yScale;\n\n    return compare(d, 0) ? (_yScale = yScale(d)) !== null && _yScale !== void 0 ? _yScale : 0 : yRef;\n  };\n\n  var getHeight = function getHeight(d, y) {\n    var _yScale2;\n\n    return compare(d, 0) ? yRef - y : ((_yScale2 = yScale(d)) !== null && _yScale2 !== void 0 ? _yScale2 : 0) - yRef;\n  };\n\n  var cleanedData = data.map(filterNullValues);\n  var bars = [];\n  keys.forEach(function (key, i) {\n    return range(0, xScale.domain().length).forEach(function (index) {\n      var _xScale;\n\n      var _coerceValue = coerceValue(data[index][key]),\n          _coerceValue2 = _slicedToArray(_coerceValue, 2),\n          rawValue = _coerceValue2[0],\n          value = _coerceValue2[1];\n\n      var indexValue = getIndex(data[index]);\n      var x = ((_xScale = xScale(indexValue)) !== null && _xScale !== void 0 ? _xScale : 0) + barWidth * i + innerPadding * i;\n      var y = getY(value);\n      var barHeight = getHeight(value, y);\n      var barData = {\n        id: key,\n        value: rawValue === null ? rawValue : value,\n        formattedValue: formatValue(value),\n        hidden: false,\n        index: index,\n        indexValue: indexValue,\n        data: cleanedData[index]\n      };\n      bars.push({\n        key: \"\".concat(key, \".\").concat(barData.indexValue),\n        index: bars.length,\n        data: barData,\n        x: x,\n        y: y,\n        absX: margin.left + x,\n        absY: margin.top + y,\n        width: barWidth,\n        height: barHeight,\n        color: getColor(barData),\n        label: getTooltipLabel(barData)\n      });\n    });\n  });\n  return bars;\n};\n\nvar generateHorizontalGroupedBars = function generateHorizontalGroupedBars(_ref2, barHeight, reverse, xRef) {\n  var data = _ref2.data,\n      formatValue = _ref2.formatValue,\n      getIndex = _ref2.getIndex,\n      getColor = _ref2.getColor,\n      getTooltipLabel = _ref2.getTooltipLabel,\n      keys = _ref2.keys,\n      _ref2$innerPadding = _ref2.innerPadding,\n      innerPadding = _ref2$innerPadding === void 0 ? 0 : _ref2$innerPadding,\n      xScale = _ref2.xScale,\n      yScale = _ref2.yScale,\n      margin = _ref2.margin;\n  var compare = reverse ? lt : gt;\n\n  var getX = function getX(d) {\n    var _xScale2;\n\n    return compare(d, 0) ? xRef : (_xScale2 = xScale(d)) !== null && _xScale2 !== void 0 ? _xScale2 : 0;\n  };\n\n  var getWidth = function getWidth(d, x) {\n    var _xScale3;\n\n    return compare(d, 0) ? ((_xScale3 = xScale(d)) !== null && _xScale3 !== void 0 ? _xScale3 : 0) - xRef : xRef - x;\n  };\n\n  var cleanedData = data.map(filterNullValues);\n  var bars = [];\n  keys.forEach(function (key, i) {\n    return range(0, yScale.domain().length).forEach(function (index) {\n      var _yScale3;\n\n      var _coerceValue3 = coerceValue(data[index][key]),\n          _coerceValue4 = _slicedToArray(_coerceValue3, 2),\n          rawValue = _coerceValue4[0],\n          value = _coerceValue4[1];\n\n      var indexValue = getIndex(data[index]);\n      var x = getX(value);\n      var y = ((_yScale3 = yScale(indexValue)) !== null && _yScale3 !== void 0 ? _yScale3 : 0) + barHeight * i + innerPadding * i;\n      var barWidth = getWidth(value, x);\n      var barData = {\n        id: key,\n        value: rawValue === null ? rawValue : value,\n        formattedValue: formatValue(value),\n        hidden: false,\n        index: index,\n        indexValue: indexValue,\n        data: cleanedData[index]\n      };\n      bars.push({\n        key: \"\".concat(key, \".\").concat(barData.indexValue),\n        index: bars.length,\n        data: barData,\n        x: x,\n        y: y,\n        absX: margin.left + x,\n        absY: margin.top + y,\n        width: barWidth,\n        height: barHeight,\n        color: getColor(barData),\n        label: getTooltipLabel(barData)\n      });\n    });\n  });\n  return bars;\n};\n\nvar generateGroupedBars = function generateGroupedBars(_ref3) {\n  var _scale;\n\n  var layout = _ref3.layout,\n      minValue = _ref3.minValue,\n      maxValue = _ref3.maxValue,\n      reverse = _ref3.reverse,\n      width = _ref3.width,\n      height = _ref3.height,\n      _ref3$padding = _ref3.padding,\n      padding = _ref3$padding === void 0 ? 0 : _ref3$padding,\n      _ref3$innerPadding = _ref3.innerPadding,\n      innerPadding = _ref3$innerPadding === void 0 ? 0 : _ref3$innerPadding,\n      valueScale = _ref3.valueScale,\n      indexScaleConfig = _ref3.indexScale,\n      _ref3$hiddenIds = _ref3.hiddenIds,\n      hiddenIds = _ref3$hiddenIds === void 0 ? [] : _ref3$hiddenIds,\n      props = _objectWithoutProperties(_ref3, [\"layout\", \"minValue\", \"maxValue\", \"reverse\", \"width\", \"height\", \"padding\", \"innerPadding\", \"valueScale\", \"indexScale\", \"hiddenIds\"]);\n\n  var keys = props.keys.filter(function (key) {\n    return !hiddenIds.includes(key);\n  });\n  var data = normalizeData(props.data, keys);\n\n  var _ref4 = layout === 'vertical' ? ['y', 'x', width] : ['x', 'y', height],\n      _ref5 = _slicedToArray(_ref4, 3),\n      axis = _ref5[0],\n      otherAxis = _ref5[1],\n      size = _ref5[2];\n\n  var indexScale = getIndexScale(data, props.getIndex, padding, indexScaleConfig, size, otherAxis);\n\n  var scaleSpec = _objectSpread2({\n    max: maxValue,\n    min: minValue,\n    reverse: reverse\n  }, valueScale);\n\n  var clampMin = scaleSpec.min === 'auto' ? clampToZero : function (value) {\n    return value;\n  };\n  var values = data.reduce(function (acc, entry) {\n    return [].concat(_toConsumableArray(acc), _toConsumableArray(keys.map(function (k) {\n      return entry[k];\n    })));\n  }, []).filter(Boolean);\n  var min = clampMin(Math.min.apply(Math, _toConsumableArray(values)));\n  var max = zeroIfNotFinite(Math.max.apply(Math, _toConsumableArray(values)));\n  var scale = computeScale(scaleSpec, {\n    all: values,\n    min: min,\n    max: max\n  }, axis === 'x' ? width : height, axis);\n\n  var _ref6 = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale],\n      _ref7 = _slicedToArray(_ref6, 2),\n      xScale = _ref7[0],\n      yScale = _ref7[1];\n\n  var bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length;\n  var params = [_objectSpread2(_objectSpread2({}, props), {}, {\n    data: data,\n    keys: keys,\n    innerPadding: innerPadding,\n    xScale: xScale,\n    yScale: yScale\n  }), bandwidth, scaleSpec.reverse, (_scale = scale(0)) !== null && _scale !== void 0 ? _scale : 0];\n  var bars = bandwidth > 0 ? layout === 'vertical' ? generateVerticalGroupedBars.apply(void 0, params) : generateHorizontalGroupedBars.apply(void 0, params) : [];\n  return {\n    xScale: xScale,\n    yScale: yScale,\n    bars: bars\n  };\n};\n\nvar flattenDeep = function flattenDeep(arr) {\n  var _ref;\n\n  return arr.some(Array.isArray) ? flattenDeep((_ref = []).concat.apply(_ref, _toConsumableArray(arr))) : arr;\n};\n\nvar filterZerosIfLog = function filterZerosIfLog(array, type) {\n  return type === 'log' ? array.filter(function (num) {\n    return num !== 0;\n  }) : array;\n};\n\nvar generateVerticalStackedBars = function generateVerticalStackedBars(_ref2, barWidth, reverse) {\n  var formatValue = _ref2.formatValue,\n      getColor = _ref2.getColor,\n      getIndex = _ref2.getIndex,\n      getTooltipLabel = _ref2.getTooltipLabel,\n      innerPadding = _ref2.innerPadding,\n      stackedData = _ref2.stackedData,\n      xScale = _ref2.xScale,\n      yScale = _ref2.yScale,\n      margin = _ref2.margin;\n\n  var getY = function getY(d) {\n    return yScale(d[reverse ? 0 : 1]);\n  };\n\n  var getHeight = function getHeight(d, y) {\n    var _yScale;\n\n    return ((_yScale = yScale(d[reverse ? 1 : 0])) !== null && _yScale !== void 0 ? _yScale : 0) - y;\n  };\n\n  var bars = [];\n  stackedData.forEach(function (stackedDataItem) {\n    return xScale.domain().forEach(function (index, i) {\n      var _xScale, _getY;\n\n      var d = stackedDataItem[i];\n      var x = (_xScale = xScale(getIndex(d.data))) !== null && _xScale !== void 0 ? _xScale : 0;\n      var y = ((_getY = getY(d)) !== null && _getY !== void 0 ? _getY : 0) + innerPadding * 0.5;\n      var barHeight = getHeight(d, y) - innerPadding;\n\n      var _coerceValue = coerceValue(d.data[stackedDataItem.key]),\n          _coerceValue2 = _slicedToArray(_coerceValue, 2),\n          rawValue = _coerceValue2[0],\n          value = _coerceValue2[1];\n\n      var barData = {\n        id: stackedDataItem.key,\n        value: rawValue === null ? rawValue : value,\n        formattedValue: formatValue(value),\n        hidden: false,\n        index: i,\n        indexValue: index,\n        data: filterNullValues(d.data)\n      };\n      bars.push({\n        key: \"\".concat(stackedDataItem.key, \".\").concat(index),\n        index: bars.length,\n        data: barData,\n        x: x,\n        y: y,\n        absX: margin.left + x,\n        absY: margin.top + y,\n        width: barWidth,\n        height: barHeight,\n        color: getColor(barData),\n        label: getTooltipLabel(barData)\n      });\n    });\n  });\n  return bars;\n};\n\nvar generateHorizontalStackedBars = function generateHorizontalStackedBars(_ref3, barHeight, reverse) {\n  var formatValue = _ref3.formatValue,\n      getColor = _ref3.getColor,\n      getIndex = _ref3.getIndex,\n      getTooltipLabel = _ref3.getTooltipLabel,\n      innerPadding = _ref3.innerPadding,\n      stackedData = _ref3.stackedData,\n      xScale = _ref3.xScale,\n      yScale = _ref3.yScale,\n      margin = _ref3.margin;\n\n  var getX = function getX(d) {\n    return xScale(d[reverse ? 1 : 0]);\n  };\n\n  var getWidth = function getWidth(d, x) {\n    var _xScale2;\n\n    return ((_xScale2 = xScale(d[reverse ? 0 : 1])) !== null && _xScale2 !== void 0 ? _xScale2 : 0) - x;\n  };\n\n  var bars = [];\n  stackedData.forEach(function (stackedDataItem) {\n    return yScale.domain().forEach(function (index, i) {\n      var _yScale2, _getX;\n\n      var d = stackedDataItem[i];\n      var y = (_yScale2 = yScale(getIndex(d.data))) !== null && _yScale2 !== void 0 ? _yScale2 : 0;\n      var x = ((_getX = getX(d)) !== null && _getX !== void 0 ? _getX : 0) + innerPadding * 0.5;\n      var barWidth = getWidth(d, x) - innerPadding;\n\n      var _coerceValue3 = coerceValue(d.data[stackedDataItem.key]),\n          _coerceValue4 = _slicedToArray(_coerceValue3, 2),\n          rawValue = _coerceValue4[0],\n          value = _coerceValue4[1];\n\n      var barData = {\n        id: stackedDataItem.key,\n        value: rawValue === null ? rawValue : value,\n        formattedValue: formatValue(value),\n        hidden: false,\n        index: i,\n        indexValue: index,\n        data: filterNullValues(d.data)\n      };\n      bars.push({\n        key: \"\".concat(stackedDataItem.key, \".\").concat(index),\n        index: bars.length,\n        data: barData,\n        x: x,\n        y: y,\n        absX: margin.left + x,\n        absY: margin.top + y,\n        width: barWidth,\n        height: barHeight,\n        color: getColor(barData),\n        label: getTooltipLabel(barData)\n      });\n    });\n  });\n  return bars;\n};\n\nvar generateStackedBars = function generateStackedBars(_ref4) {\n  var data = _ref4.data,\n      layout = _ref4.layout,\n      minValue = _ref4.minValue,\n      maxValue = _ref4.maxValue,\n      reverse = _ref4.reverse,\n      width = _ref4.width,\n      height = _ref4.height,\n      _ref4$padding = _ref4.padding,\n      padding = _ref4$padding === void 0 ? 0 : _ref4$padding,\n      valueScale = _ref4.valueScale,\n      indexScaleConfig = _ref4.indexScale,\n      _ref4$hiddenIds = _ref4.hiddenIds,\n      hiddenIds = _ref4$hiddenIds === void 0 ? [] : _ref4$hiddenIds,\n      props = _objectWithoutProperties(_ref4, [\"data\", \"layout\", \"minValue\", \"maxValue\", \"reverse\", \"width\", \"height\", \"padding\", \"valueScale\", \"indexScale\", \"hiddenIds\"]);\n\n  var keys = props.keys.filter(function (key) {\n    return !hiddenIds.includes(key);\n  });\n  var stackedData = stack().keys(keys).offset(stackOffsetDiverging)(normalizeData(data, keys));\n\n  var _ref5 = layout === 'vertical' ? ['y', 'x', width] : ['x', 'y', height],\n      _ref6 = _slicedToArray(_ref5, 3),\n      axis = _ref6[0],\n      otherAxis = _ref6[1],\n      size = _ref6[2];\n\n  var indexScale = getIndexScale(data, props.getIndex, padding, indexScaleConfig, size, otherAxis);\n\n  var scaleSpec = _objectSpread2({\n    max: maxValue,\n    min: minValue,\n    reverse: reverse\n  }, valueScale);\n\n  var values = filterZerosIfLog(flattenDeep(stackedData), valueScale.type);\n  var min = Math.min.apply(Math, _toConsumableArray(values));\n  var max = Math.max.apply(Math, _toConsumableArray(values));\n  var scale = computeScale(scaleSpec, {\n    all: values,\n    min: min,\n    max: max\n  }, axis === 'x' ? width : height, axis);\n\n  var _ref7 = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale],\n      _ref8 = _slicedToArray(_ref7, 2),\n      xScale = _ref8[0],\n      yScale = _ref8[1];\n\n  var innerPadding = props.innerPadding > 0 ? props.innerPadding : 0;\n  var bandwidth = indexScale.bandwidth();\n  var params = [_objectSpread2(_objectSpread2({}, props), {}, {\n    innerPadding: innerPadding,\n    stackedData: stackedData,\n    xScale: xScale,\n    yScale: yScale\n  }), bandwidth, scaleSpec.reverse];\n  var bars = bandwidth > 0 ? layout === 'vertical' ? generateVerticalStackedBars.apply(void 0, params) : generateHorizontalStackedBars.apply(void 0, params) : [];\n  return {\n    xScale: xScale,\n    yScale: yScale,\n    bars: bars\n  };\n};\n\nvar getLegendDataForKeys = function getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel) {\n  var data = _uniqBy(bars.map(function (bar) {\n    var _bar$color;\n\n    return {\n      id: bar.data.id,\n      label: getLegendLabel(bar.data),\n      hidden: bar.data.hidden,\n      color: (_bar$color = bar.color) !== null && _bar$color !== void 0 ? _bar$color : '#000'\n    };\n  }), function (_ref) {\n    var id = _ref.id;\n    return id;\n  });\n\n  if (layout === 'vertical' && groupMode === 'stacked' && direction === 'column' && reverse !== true || layout === 'horizontal' && groupMode === 'stacked' && reverse === true) {\n    data.reverse();\n  }\n\n  return data;\n};\n\nvar getLegendDataForIndexes = function getLegendDataForIndexes(bars, layout, getLegendLabel) {\n  var data = _uniqBy(bars.map(function (bar) {\n    var _bar$data$indexValue, _bar$color2;\n\n    return {\n      id: (_bar$data$indexValue = bar.data.indexValue) !== null && _bar$data$indexValue !== void 0 ? _bar$data$indexValue : '',\n      label: getLegendLabel(bar.data),\n      hidden: bar.data.hidden,\n      color: (_bar$color2 = bar.color) !== null && _bar$color2 !== void 0 ? _bar$color2 : '#000'\n    };\n  }), function (_ref2) {\n    var id = _ref2.id;\n    return id;\n  });\n\n  if (layout === 'horizontal') {\n    data.reverse();\n  }\n\n  return data;\n};\n\nvar getLegendData = function getLegendData(_ref3) {\n  var bars = _ref3.bars,\n      direction = _ref3.direction,\n      from = _ref3.from,\n      groupMode = _ref3.groupMode,\n      layout = _ref3.layout,\n      legendLabel = _ref3.legendLabel,\n      reverse = _ref3.reverse;\n  var getLegendLabel = getPropertyAccessor(legendLabel !== null && legendLabel !== void 0 ? legendLabel : from === 'indexes' ? 'indexValue' : 'id');\n\n  if (from === 'indexes') {\n    return getLegendDataForIndexes(bars, layout, getLegendLabel);\n  }\n\n  return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel);\n};\n\nvar useBar = function useBar(_ref) {\n  var _ref$indexBy = _ref.indexBy,\n      indexBy = _ref$indexBy === void 0 ? defaultProps.indexBy : _ref$indexBy,\n      _ref$keys = _ref.keys,\n      keys = _ref$keys === void 0 ? defaultProps.keys : _ref$keys,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? defaultProps.label : _ref$label,\n      _ref$tooltipLabel = _ref.tooltipLabel,\n      tooltipLabel = _ref$tooltipLabel === void 0 ? defaultProps.tooltipLabel : _ref$tooltipLabel,\n      valueFormat = _ref.valueFormat,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? defaultProps.colors : _ref$colors,\n      _ref$colorBy = _ref.colorBy,\n      colorBy = _ref$colorBy === void 0 ? defaultProps.colorBy : _ref$colorBy,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? defaultProps.borderColor : _ref$borderColor,\n      _ref$labelTextColor = _ref.labelTextColor,\n      labelTextColor = _ref$labelTextColor === void 0 ? defaultProps.labelTextColor : _ref$labelTextColor,\n      _ref$groupMode = _ref.groupMode,\n      groupMode = _ref$groupMode === void 0 ? defaultProps.groupMode : _ref$groupMode,\n      _ref$layout = _ref.layout,\n      layout = _ref$layout === void 0 ? defaultProps.layout : _ref$layout,\n      _ref$reverse = _ref.reverse,\n      reverse = _ref$reverse === void 0 ? defaultProps.reverse : _ref$reverse,\n      data = _ref.data,\n      _ref$minValue = _ref.minValue,\n      minValue = _ref$minValue === void 0 ? defaultProps.minValue : _ref$minValue,\n      _ref$maxValue = _ref.maxValue,\n      maxValue = _ref$maxValue === void 0 ? defaultProps.maxValue : _ref$maxValue,\n      margin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? defaultProps.padding : _ref$padding,\n      _ref$innerPadding = _ref.innerPadding,\n      innerPadding = _ref$innerPadding === void 0 ? defaultProps.innerPadding : _ref$innerPadding,\n      _ref$valueScale = _ref.valueScale,\n      valueScale = _ref$valueScale === void 0 ? defaultProps.valueScale : _ref$valueScale,\n      _ref$indexScale = _ref.indexScale,\n      indexScale = _ref$indexScale === void 0 ? defaultProps.indexScale : _ref$indexScale,\n      _ref$initialHiddenIds = _ref.initialHiddenIds,\n      initialHiddenIds = _ref$initialHiddenIds === void 0 ? defaultProps.initialHiddenIds : _ref$initialHiddenIds,\n      _ref$enableLabel = _ref.enableLabel,\n      enableLabel = _ref$enableLabel === void 0 ? defaultProps.enableLabel : _ref$enableLabel,\n      _ref$labelSkipWidth = _ref.labelSkipWidth,\n      labelSkipWidth = _ref$labelSkipWidth === void 0 ? defaultProps.labelSkipWidth : _ref$labelSkipWidth,\n      _ref$labelSkipHeight = _ref.labelSkipHeight,\n      labelSkipHeight = _ref$labelSkipHeight === void 0 ? defaultProps.labelSkipHeight : _ref$labelSkipHeight,\n      _ref$legends = _ref.legends,\n      legends = _ref$legends === void 0 ? defaultProps.legends : _ref$legends,\n      legendLabel = _ref.legendLabel;\n\n  var _useState = useState(initialHiddenIds !== null && initialHiddenIds !== void 0 ? initialHiddenIds : []),\n      _useState2 = _slicedToArray(_useState, 2),\n      hiddenIds = _useState2[0],\n      setHiddenIds = _useState2[1];\n\n  var toggleSerie = useCallback(function (id) {\n    setHiddenIds(function (state) {\n      return state.indexOf(id) > -1 ? state.filter(function (item) {\n        return item !== id;\n      }) : [].concat(_toConsumableArray(state), [id]);\n    });\n  }, []);\n  var getIndex = usePropertyAccessor(indexBy);\n  var getLabel = usePropertyAccessor(label);\n  var getTooltipLabel = usePropertyAccessor(tooltipLabel);\n  var formatValue = useValueFormatter(valueFormat);\n  var theme = useTheme();\n  var getColor = useOrdinalColorScale(colors, colorBy);\n  var getBorderColor = useInheritedColor(borderColor, theme);\n  var getLabelColor = useInheritedColor(labelTextColor, theme);\n  var generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars;\n\n  var _generateBars = generateBars({\n    layout: layout,\n    reverse: reverse,\n    data: data,\n    getIndex: getIndex,\n    keys: keys,\n    minValue: minValue,\n    maxValue: maxValue,\n    width: width,\n    height: height,\n    getColor: getColor,\n    padding: padding,\n    innerPadding: innerPadding,\n    valueScale: valueScale,\n    indexScale: indexScale,\n    hiddenIds: hiddenIds,\n    formatValue: formatValue,\n    getTooltipLabel: getTooltipLabel,\n    margin: margin\n  }),\n      bars = _generateBars.bars,\n      xScale = _generateBars.xScale,\n      yScale = _generateBars.yScale;\n\n  var barsWithValue = useMemo(function () {\n    return bars.filter(function (bar) {\n      return bar.data.value !== null;\n    }).map(function (bar, index) {\n      return _objectSpread2(_objectSpread2({}, bar), {}, {\n        index: index\n      });\n    });\n  }, [bars]);\n  var shouldRenderBarLabel = useCallback(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    if (!enableLabel) return false;\n    if (labelSkipWidth > 0 && width < labelSkipWidth) return false;\n    if (labelSkipHeight > 0 && height < labelSkipHeight) return false;\n    return true;\n  }, [enableLabel, labelSkipWidth, labelSkipHeight]);\n  var legendData = useMemo(function () {\n    return keys.map(function (key) {\n      var bar = bars.find(function (bar) {\n        return bar.data.id === key;\n      });\n      return _objectSpread2(_objectSpread2({}, bar), {}, {\n        data: _objectSpread2(_objectSpread2({\n          id: key\n        }, bar === null || bar === void 0 ? void 0 : bar.data), {}, {\n          hidden: hiddenIds.includes(key)\n        })\n      });\n    });\n  }, [hiddenIds, keys, bars]);\n  var legendsWithData = useMemo(function () {\n    return legends.map(function (legend) {\n      var data = getLegendData({\n        bars: legend.dataFrom === 'keys' ? legendData : bars,\n        direction: legend.direction,\n        from: legend.dataFrom,\n        groupMode: groupMode,\n        layout: layout,\n        legendLabel: legendLabel,\n        reverse: reverse\n      });\n      return [legend, data];\n    });\n  }, [legends, legendData, bars, groupMode, layout, legendLabel, reverse]);\n  return {\n    bars: bars,\n    barsWithValue: barsWithValue,\n    xScale: xScale,\n    yScale: yScale,\n    getIndex: getIndex,\n    getLabel: getLabel,\n    getTooltipLabel: getTooltipLabel,\n    formatValue: formatValue,\n    getColor: getColor,\n    getBorderColor: getBorderColor,\n    getLabelColor: getLabelColor,\n    shouldRenderBarLabel: shouldRenderBarLabel,\n    hiddenIds: hiddenIds,\n    toggleSerie: toggleSerie,\n    legendsWithData: legendsWithData\n  };\n};\n\nvar InnerBar = function InnerBar(_ref) {\n  var data = _ref.data,\n      indexBy = _ref.indexBy,\n      keys = _ref.keys,\n      partialMargin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      groupMode = _ref.groupMode,\n      layout = _ref.layout,\n      reverse = _ref.reverse,\n      minValue = _ref.minValue,\n      maxValue = _ref.maxValue,\n      valueScale = _ref.valueScale,\n      indexScale = _ref.indexScale,\n      padding = _ref.padding,\n      innerPadding = _ref.innerPadding,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      _ref$axisBottom = _ref.axisBottom,\n      axisBottom = _ref$axisBottom === void 0 ? svgDefaultProps.axisBottom : _ref$axisBottom,\n      _ref$axisLeft = _ref.axisLeft,\n      axisLeft = _ref$axisLeft === void 0 ? svgDefaultProps.axisLeft : _ref$axisLeft,\n      _ref$enableGridX = _ref.enableGridX,\n      enableGridX = _ref$enableGridX === void 0 ? svgDefaultProps.enableGridX : _ref$enableGridX,\n      _ref$enableGridY = _ref.enableGridY,\n      enableGridY = _ref$enableGridY === void 0 ? svgDefaultProps.enableGridY : _ref$enableGridY,\n      gridXValues = _ref.gridXValues,\n      gridYValues = _ref.gridYValues,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? svgDefaultProps.layers : _ref$layers,\n      _ref$barComponent = _ref.barComponent,\n      barComponent = _ref$barComponent === void 0 ? svgDefaultProps.barComponent : _ref$barComponent,\n      enableLabel = _ref.enableLabel,\n      label = _ref.label,\n      labelSkipWidth = _ref.labelSkipWidth,\n      labelSkipHeight = _ref.labelSkipHeight,\n      labelTextColor = _ref.labelTextColor,\n      _ref$markers = _ref.markers,\n      markers = _ref$markers === void 0 ? svgDefaultProps.markers : _ref$markers,\n      colorBy = _ref.colorBy,\n      colors = _ref.colors,\n      _ref$defs = _ref.defs,\n      defs = _ref$defs === void 0 ? svgDefaultProps.defs : _ref$defs,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? svgDefaultProps.fill : _ref$fill,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? svgDefaultProps.borderRadius : _ref$borderRadius,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? svgDefaultProps.borderWidth : _ref$borderWidth,\n      borderColor = _ref.borderColor,\n      _ref$annotations = _ref.annotations,\n      annotations = _ref$annotations === void 0 ? svgDefaultProps.annotations : _ref$annotations,\n      legendLabel = _ref.legendLabel,\n      tooltipLabel = _ref.tooltipLabel,\n      valueFormat = _ref.valueFormat,\n      _ref$isInteractive = _ref.isInteractive,\n      isInteractive = _ref$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref$isInteractive,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? svgDefaultProps.tooltip : _ref$tooltip,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      legends = _ref.legends,\n      _ref$role = _ref.role,\n      role = _ref$role === void 0 ? svgDefaultProps.role : _ref$role,\n      ariaLabel = _ref.ariaLabel,\n      ariaLabelledBy = _ref.ariaLabelledBy,\n      ariaDescribedBy = _ref.ariaDescribedBy,\n      _ref$isFocusable = _ref.isFocusable,\n      isFocusable = _ref$isFocusable === void 0 ? svgDefaultProps.isFocusable : _ref$isFocusable,\n      barAriaLabel = _ref.barAriaLabel,\n      barAriaLabelledBy = _ref.barAriaLabelledBy,\n      barAriaDescribedBy = _ref.barAriaDescribedBy,\n      initialHiddenIds = _ref.initialHiddenIds;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight,\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight;\n\n  var _useBar = useBar({\n    indexBy: indexBy,\n    label: label,\n    tooltipLabel: tooltipLabel,\n    valueFormat: valueFormat,\n    colors: colors,\n    colorBy: colorBy,\n    borderColor: borderColor,\n    labelTextColor: labelTextColor,\n    groupMode: groupMode,\n    layout: layout,\n    reverse: reverse,\n    data: data,\n    keys: keys,\n    minValue: minValue,\n    maxValue: maxValue,\n    margin: margin,\n    width: innerWidth,\n    height: innerHeight,\n    padding: padding,\n    innerPadding: innerPadding,\n    valueScale: valueScale,\n    indexScale: indexScale,\n    enableLabel: enableLabel,\n    labelSkipWidth: labelSkipWidth,\n    labelSkipHeight: labelSkipHeight,\n    legends: legends,\n    legendLabel: legendLabel,\n    initialHiddenIds: initialHiddenIds\n  }),\n      bars = _useBar.bars,\n      barsWithValue = _useBar.barsWithValue,\n      xScale = _useBar.xScale,\n      yScale = _useBar.yScale,\n      getLabel = _useBar.getLabel,\n      getTooltipLabel = _useBar.getTooltipLabel,\n      getBorderColor = _useBar.getBorderColor,\n      getLabelColor = _useBar.getLabelColor,\n      shouldRenderBarLabel = _useBar.shouldRenderBarLabel,\n      toggleSerie = _useBar.toggleSerie,\n      legendsWithData = _useBar.legendsWithData;\n\n  var transition = useTransition(barsWithValue, {\n    keys: function keys(bar) {\n      return bar.key;\n    },\n    from: function from(bar) {\n      return _objectSpread2({\n        borderColor: getBorderColor(bar),\n        color: bar.color,\n        height: 0,\n        labelColor: getLabelColor(bar),\n        labelOpacity: 0,\n        labelX: bar.width / 2,\n        labelY: bar.height / 2,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y + bar.height, \")\"),\n        width: bar.width\n      }, layout === 'vertical' ? {} : {\n        height: bar.height,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y, \")\"),\n        width: 0\n      });\n    },\n    enter: function enter(bar) {\n      return {\n        borderColor: getBorderColor(bar),\n        color: bar.color,\n        height: bar.height,\n        labelColor: getLabelColor(bar),\n        labelOpacity: 1,\n        labelX: bar.width / 2,\n        labelY: bar.height / 2,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y, \")\"),\n        width: bar.width\n      };\n    },\n    update: function update(bar) {\n      return {\n        borderColor: getBorderColor(bar),\n        color: bar.color,\n        height: bar.height,\n        labelColor: getLabelColor(bar),\n        labelOpacity: 1,\n        labelX: bar.width / 2,\n        labelY: bar.height / 2,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y, \")\"),\n        width: bar.width\n      };\n    },\n    leave: function leave(bar) {\n      return _objectSpread2({\n        borderColor: getBorderColor(bar),\n        color: bar.color,\n        height: 0,\n        labelColor: getLabelColor(bar),\n        labelOpacity: 0,\n        labelX: bar.width / 2,\n        labelY: 0,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y + bar.height, \")\"),\n        width: bar.width\n      }, layout === 'vertical' ? {} : {\n        labelX: 0,\n        labelY: bar.height / 2,\n        height: bar.height,\n        transform: \"translate(\".concat(bar.x, \", \").concat(bar.y, \")\"),\n        width: 0\n      });\n    },\n    config: springConfig,\n    immediate: !animate\n  });\n  var commonProps = useMemo(function () {\n    return {\n      borderRadius: borderRadius,\n      borderWidth: borderWidth,\n      enableLabel: enableLabel,\n      isInteractive: isInteractive,\n      labelSkipWidth: labelSkipWidth,\n      labelSkipHeight: labelSkipHeight,\n      onClick: onClick,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      getTooltipLabel: getTooltipLabel,\n      tooltip: tooltip,\n      isFocusable: isFocusable,\n      ariaLabel: barAriaLabel,\n      ariaLabelledBy: barAriaLabelledBy,\n      ariaDescribedBy: barAriaDescribedBy\n    };\n  }, [borderRadius, borderWidth, enableLabel, getTooltipLabel, isInteractive, labelSkipHeight, labelSkipWidth, onClick, onMouseEnter, onMouseLeave, tooltip, isFocusable, barAriaLabel, barAriaLabelledBy, barAriaDescribedBy]);\n  var boundDefs = bindDefs(defs, bars, fill, {\n    dataKey: 'data',\n    targetKey: 'data.fill'\n  });\n  var layerById = {\n    annotations: null,\n    axes: null,\n    bars: null,\n    grid: null,\n    legends: null,\n    markers: null\n  };\n\n  if (layers.includes('annotations')) {\n    layerById.annotations = jsx(BarAnnotations, {\n      bars: bars,\n      annotations: annotations\n    }, \"annotations\");\n  }\n\n  if (layers.includes('axes')) {\n    layerById.axes = jsx(Axes, {\n      xScale: xScale,\n      yScale: yScale,\n      width: innerWidth,\n      height: innerHeight,\n      top: axisTop,\n      right: axisRight,\n      bottom: axisBottom,\n      left: axisLeft\n    }, \"axes\");\n  }\n\n  if (layers.includes('bars')) {\n    layerById.bars = jsx(Fragment$1, {\n      children: transition(function (style, bar) {\n        return createElement(barComponent, _objectSpread2(_objectSpread2({}, commonProps), {}, {\n          bar: bar,\n          style: style,\n          shouldRenderLabel: shouldRenderBarLabel(bar),\n          label: getLabel(bar.data)\n        }));\n      })\n    }, \"bars\");\n  }\n\n  if (layers.includes('grid')) {\n    layerById.grid = jsx(Grid, {\n      width: innerWidth,\n      height: innerHeight,\n      xScale: enableGridX ? xScale : null,\n      yScale: enableGridY ? yScale : null,\n      xValues: gridXValues,\n      yValues: gridYValues\n    }, \"grid\");\n  }\n\n  if (layers.includes('legends')) {\n    layerById.legends = jsx(BarLegends, {\n      width: innerWidth,\n      height: innerHeight,\n      legends: legendsWithData,\n      toggleSerie: toggleSerie\n    }, \"legends\");\n  }\n\n  if (layers.includes('markers')) {\n    layerById.markers = jsx(CartesianMarkers, {\n      markers: markers,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: xScale,\n      yScale: yScale\n    }, \"markers\");\n  }\n\n  var layerContext = useMemo(function () {\n    return _objectSpread2(_objectSpread2({}, commonProps), {}, {\n      margin: margin,\n      innerWidth: innerWidth,\n      innerHeight: innerHeight,\n      width: width,\n      height: height,\n      bars: bars,\n      xScale: xScale,\n      yScale: yScale\n    });\n  }, [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]);\n  return jsx(SvgWrapper, {\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    defs: boundDefs,\n    role: role,\n    ariaLabel: ariaLabel,\n    ariaLabelledBy: ariaLabelledBy,\n    ariaDescribedBy: ariaDescribedBy,\n    isFocusable: isFocusable,\n    children: layers.map(function (layer, i) {\n      var _layerById$layer;\n\n      if (typeof layer === 'function') {\n        return jsx(Fragment$1, {\n          children: createElement(layer, layerContext)\n        }, i);\n      }\n\n      return (_layerById$layer = layerById === null || layerById === void 0 ? void 0 : layerById[layer]) !== null && _layerById$layer !== void 0 ? _layerById$layer : null;\n    })\n  });\n};\n\nvar Bar = function Bar(_ref2) {\n  var _ref2$isInteractive = _ref2.isInteractive,\n      isInteractive = _ref2$isInteractive === void 0 ? svgDefaultProps.isInteractive : _ref2$isInteractive,\n      _ref2$animate = _ref2.animate,\n      animate = _ref2$animate === void 0 ? svgDefaultProps.animate : _ref2$animate,\n      _ref2$motionConfig = _ref2.motionConfig,\n      motionConfig = _ref2$motionConfig === void 0 ? svgDefaultProps.motionConfig : _ref2$motionConfig,\n      theme = _ref2.theme,\n      renderWrapper = _ref2.renderWrapper,\n      otherProps = _objectWithoutProperties(_ref2, [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"]);\n\n  return jsx(Container, {\n    animate: animate,\n    isInteractive: isInteractive,\n    motionConfig: motionConfig,\n    renderWrapper: renderWrapper,\n    theme: theme,\n    children: jsx(InnerBar, _objectSpread2({\n      isInteractive: isInteractive\n    }, otherProps))\n  });\n};\n\nvar findBarUnderCursor = function findBarUnderCursor(nodes, margin, x, y) {\n  return nodes.find(function (node) {\n    return isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y);\n  });\n};\n\nvar isNumber = function isNumber(value) {\n  return typeof value === 'number';\n};\n\nvar InnerBarCanvas = function InnerBarCanvas(_ref) {\n  var data = _ref.data,\n      indexBy = _ref.indexBy,\n      keys = _ref.keys,\n      partialMargin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      groupMode = _ref.groupMode,\n      layout = _ref.layout,\n      reverse = _ref.reverse,\n      minValue = _ref.minValue,\n      maxValue = _ref.maxValue,\n      valueScale = _ref.valueScale,\n      indexScale = _ref.indexScale,\n      padding = _ref.padding,\n      innerPadding = _ref.innerPadding,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      _ref$axisBottom = _ref.axisBottom,\n      axisBottom = _ref$axisBottom === void 0 ? canvasDefaultProps.axisBottom : _ref$axisBottom,\n      _ref$axisLeft = _ref.axisLeft,\n      axisLeft = _ref$axisLeft === void 0 ? canvasDefaultProps.axisLeft : _ref$axisLeft,\n      _ref$enableGridX = _ref.enableGridX,\n      enableGridX = _ref$enableGridX === void 0 ? canvasDefaultProps.enableGridX : _ref$enableGridX,\n      _ref$enableGridY = _ref.enableGridY,\n      enableGridY = _ref$enableGridY === void 0 ? canvasDefaultProps.enableGridY : _ref$enableGridY,\n      gridXValues = _ref.gridXValues,\n      gridYValues = _ref.gridYValues,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? canvasDefaultProps.layers : _ref$layers,\n      _ref$renderBar = _ref.renderBar,\n      renderBar = _ref$renderBar === void 0 ? function (ctx, _ref2) {\n    var _ref2$bar = _ref2.bar,\n        color = _ref2$bar.color,\n        height = _ref2$bar.height,\n        width = _ref2$bar.width,\n        x = _ref2$bar.x,\n        y = _ref2$bar.y,\n        borderColor = _ref2.borderColor,\n        borderRadius = _ref2.borderRadius,\n        borderWidth = _ref2.borderWidth,\n        label = _ref2.label,\n        labelColor = _ref2.labelColor,\n        shouldRenderLabel = _ref2.shouldRenderLabel;\n    ctx.fillStyle = color;\n\n    if (borderWidth > 0) {\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = borderWidth;\n    }\n\n    ctx.beginPath();\n\n    if (borderRadius > 0) {\n      var radius = Math.min(borderRadius, height);\n      ctx.moveTo(x + radius, y);\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n    } else {\n      ctx.rect(x, y, width, height);\n    }\n\n    ctx.fill();\n\n    if (borderWidth > 0) {\n      ctx.stroke();\n    }\n\n    if (shouldRenderLabel) {\n      ctx.textBaseline = 'middle';\n      ctx.textAlign = 'center';\n      ctx.fillStyle = labelColor;\n      ctx.fillText(label, x + width / 2, y + height / 2);\n    }\n  } : _ref$renderBar,\n      enableLabel = _ref.enableLabel,\n      label = _ref.label,\n      labelSkipWidth = _ref.labelSkipWidth,\n      labelSkipHeight = _ref.labelSkipHeight,\n      labelTextColor = _ref.labelTextColor,\n      colorBy = _ref.colorBy,\n      colors = _ref.colors,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? canvasDefaultProps.borderRadius : _ref$borderRadius,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? canvasDefaultProps.borderWidth : _ref$borderWidth,\n      borderColor = _ref.borderColor,\n      _ref$annotations = _ref.annotations,\n      annotations = _ref$annotations === void 0 ? canvasDefaultProps.annotations : _ref$annotations,\n      legendLabel = _ref.legendLabel,\n      tooltipLabel = _ref.tooltipLabel,\n      valueFormat = _ref.valueFormat,\n      _ref$isInteractive = _ref.isInteractive,\n      isInteractive = _ref$isInteractive === void 0 ? canvasDefaultProps.isInteractive : _ref$isInteractive,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? canvasDefaultProps.tooltip : _ref$tooltip,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      legends = _ref.legends,\n      _ref$pixelRatio = _ref.pixelRatio,\n      pixelRatio = _ref$pixelRatio === void 0 ? canvasDefaultProps.pixelRatio : _ref$pixelRatio,\n      canvasRef = _ref.canvasRef;\n  var canvasEl = useRef(null);\n  var theme = useTheme();\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useBar = useBar({\n    indexBy: indexBy,\n    label: label,\n    tooltipLabel: tooltipLabel,\n    valueFormat: valueFormat,\n    colors: colors,\n    colorBy: colorBy,\n    borderColor: borderColor,\n    labelTextColor: labelTextColor,\n    groupMode: groupMode,\n    layout: layout,\n    reverse: reverse,\n    data: data,\n    keys: keys,\n    minValue: minValue,\n    maxValue: maxValue,\n    margin: margin,\n    width: innerWidth,\n    height: innerHeight,\n    padding: padding,\n    innerPadding: innerPadding,\n    valueScale: valueScale,\n    indexScale: indexScale,\n    enableLabel: enableLabel,\n    labelSkipWidth: labelSkipWidth,\n    labelSkipHeight: labelSkipHeight,\n    legends: legends,\n    legendLabel: legendLabel\n  }),\n      bars = _useBar.bars,\n      barsWithValue = _useBar.barsWithValue,\n      xScale = _useBar.xScale,\n      yScale = _useBar.yScale,\n      getLabel = _useBar.getLabel,\n      getTooltipLabel = _useBar.getTooltipLabel,\n      getBorderColor = _useBar.getBorderColor,\n      getLabelColor = _useBar.getLabelColor,\n      shouldRenderBarLabel = _useBar.shouldRenderBarLabel,\n      legendsWithData = _useBar.legendsWithData;\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var boundAnnotations = useComputedAnnotations({\n    annotations: useAnnotations({\n      data: bars,\n      annotations: annotations,\n      getPosition: function getPosition(node) {\n        return {\n          x: node.x,\n          y: node.y\n        };\n      },\n      getDimensions: function getDimensions(_ref3) {\n        var width = _ref3.width,\n            height = _ref3.height;\n        return {\n          width: width,\n          height: height,\n          size: Math.max(width, height)\n        };\n      }\n    })\n  });\n  var layerContext = useMemo(function () {\n    return {\n      borderRadius: borderRadius,\n      borderWidth: borderWidth,\n      enableLabel: enableLabel,\n      isInteractive: isInteractive,\n      labelSkipWidth: labelSkipWidth,\n      labelSkipHeight: labelSkipHeight,\n      onClick: onClick,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      getTooltipLabel: getTooltipLabel,\n      tooltip: tooltip,\n      margin: margin,\n      innerWidth: innerWidth,\n      innerHeight: innerHeight,\n      width: width,\n      height: height,\n      bars: bars,\n      xScale: xScale,\n      yScale: yScale\n    };\n  }, [borderRadius, borderWidth, enableLabel, getTooltipLabel, height, innerHeight, innerWidth, isInteractive, labelSkipHeight, labelSkipWidth, margin, onClick, onMouseEnter, onMouseLeave, bars, xScale, yScale, tooltip, width]);\n  useEffect(function () {\n    var _canvasEl$current;\n\n    var ctx = (_canvasEl$current = canvasEl.current) === null || _canvasEl$current === void 0 ? void 0 : _canvasEl$current.getContext('2d');\n    if (!canvasEl.current) return;\n    if (!ctx) return;\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.translate(margin.left, margin.top);\n    layers.forEach(function (layer) {\n      if (layer === 'grid') {\n        if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n          ctx.lineWidth = theme.grid.line.strokeWidth;\n          ctx.strokeStyle = theme.grid.line.stroke;\n\n          if (enableGridX) {\n            renderGridLinesToCanvas(ctx, {\n              width: width,\n              height: height,\n              scale: xScale,\n              axis: 'x',\n              values: gridXValues\n            });\n          }\n\n          if (enableGridY) {\n            renderGridLinesToCanvas(ctx, {\n              width: width,\n              height: height,\n              scale: yScale,\n              axis: 'y',\n              values: gridYValues\n            });\n          }\n        }\n      } else if (layer === 'axes') {\n        renderAxesToCanvas(ctx, {\n          xScale: xScale,\n          yScale: yScale,\n          width: innerWidth,\n          height: innerHeight,\n          top: axisTop,\n          right: axisRight,\n          bottom: axisBottom,\n          left: axisLeft,\n          theme: theme\n        });\n      } else if (layer === 'bars') {\n        barsWithValue.forEach(function (bar) {\n          renderBar(ctx, {\n            bar: bar,\n            borderColor: getBorderColor(bar),\n            borderRadius: borderRadius,\n            borderWidth: borderWidth,\n            label: getLabel(bar.data),\n            labelColor: getLabelColor(bar),\n            shouldRenderLabel: shouldRenderBarLabel(bar)\n          });\n        });\n      } else if (layer === 'legends') {\n        legendsWithData.forEach(function (_ref4) {\n          var _ref5 = _slicedToArray(_ref4, 2),\n              legend = _ref5[0],\n              data = _ref5[1];\n\n          renderLegendToCanvas(ctx, _objectSpread2(_objectSpread2({}, legend), {}, {\n            data: data,\n            containerWidth: innerWidth,\n            containerHeight: innerHeight,\n            theme: theme\n          }));\n        });\n      } else if (layer === 'annotations') {\n        renderAnnotationsToCanvas(ctx, {\n          annotations: boundAnnotations,\n          theme: theme\n        });\n      } else if (typeof layer === 'function') {\n        layer(ctx, layerContext);\n      }\n    });\n    ctx.save();\n  }, [axisBottom, axisLeft, axisRight, axisTop, barsWithValue, borderRadius, borderWidth, boundAnnotations, enableGridX, enableGridY, getBorderColor, getLabel, getLabelColor, gridXValues, gridYValues, groupMode, height, innerHeight, innerWidth, layerContext, layers, layout, legendsWithData, margin.left, margin.top, outerHeight, outerWidth, pixelRatio, renderBar, xScale, yScale, reverse, shouldRenderBarLabel, theme, width]);\n  var handleMouseHover = useCallback(function (event) {\n    if (!bars) return;\n    if (!canvasEl.current) return;\n\n    var _getRelativeCursor = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n        x = _getRelativeCursor2[0],\n        y = _getRelativeCursor2[1];\n\n    var bar = findBarUnderCursor(bars, margin, x, y);\n\n    if (bar !== undefined) {\n      showTooltipFromEvent(createElement(tooltip, _objectSpread2(_objectSpread2({}, bar.data), {}, {\n        color: bar.color,\n        label: bar.label,\n        value: Number(bar.data.value)\n      })), event);\n\n      if (event.type === 'mouseenter') {\n        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(bar.data, event);\n      }\n    } else {\n      hideTooltip();\n    }\n  }, [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]);\n  var handleMouseLeave = useCallback(function (event) {\n    if (!bars) return;\n    if (!canvasEl.current) return;\n    hideTooltip();\n\n    var _getRelativeCursor3 = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor4 = _slicedToArray(_getRelativeCursor3, 2),\n        x = _getRelativeCursor4[0],\n        y = _getRelativeCursor4[1];\n\n    var bar = findBarUnderCursor(bars, margin, x, y);\n\n    if (bar) {\n      onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(bar.data, event);\n    }\n  }, [hideTooltip, margin, onMouseLeave, bars]);\n  var handleClick = useCallback(function (event) {\n    if (!bars) return;\n    if (!canvasEl.current) return;\n\n    var _getRelativeCursor5 = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor6 = _slicedToArray(_getRelativeCursor5, 2),\n        x = _getRelativeCursor6[0],\n        y = _getRelativeCursor6[1];\n\n    var bar = findBarUnderCursor(bars, margin, x, y);\n\n    if (bar !== undefined) {\n      onClick === null || onClick === void 0 ? void 0 : onClick(_objectSpread2(_objectSpread2({}, bar.data), {}, {\n        color: bar.color\n      }), event);\n    }\n  }, [margin, onClick, bars]);\n  return jsx(\"canvas\", {\n    ref: function ref(canvas) {\n      canvasEl.current = canvas;\n      if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas;\n    },\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseEnter: isInteractive ? handleMouseHover : undefined,\n    onMouseMove: isInteractive ? handleMouseHover : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive ? handleClick : undefined\n  });\n};\n\nvar BarCanvas = forwardRef(function (_ref6, ref) {\n  var isInteractive = _ref6.isInteractive,\n      renderWrapper = _ref6.renderWrapper,\n      theme = _ref6.theme,\n      props = _objectWithoutProperties(_ref6, [\"isInteractive\", \"renderWrapper\", \"theme\"]);\n\n  return jsx(Container, {\n    isInteractive: isInteractive,\n    renderWrapper: renderWrapper,\n    theme: theme,\n    animate: false,\n    children: jsx(InnerBarCanvas, _objectSpread2(_objectSpread2({}, props), {}, {\n      canvasRef: ref\n    }))\n  });\n});\n\nvar ResponsiveBar = function ResponsiveBar(props) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(Bar, _objectSpread2({\n        width: width,\n        height: height\n      }, props));\n    }\n  });\n};\n\nvar ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas(props, ref) {\n  return jsx(ResponsiveWrapper, {\n    children: function children(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      return jsx(BarCanvas, _objectSpread2(_objectSpread2({\n        width: width,\n        height: height\n      }, props), {}, {\n        ref: ref\n      }));\n    }\n  });\n});\nexport { Bar, BarCanvas, BarItem, ResponsiveBar, ResponsiveBarCanvas, canvasDefaultProps, defaultProps, svgDefaultProps };","map":{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../src/BarAnnotations.tsx","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../src/BarLegends.tsx","../src/BarItem.tsx","../src/BarTooltip.tsx","../src/props.ts","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/hooks.ts","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBar.tsx","../src/ResponsiveBarCanvas.tsx"],"names":["objectWithoutPropertiesLoose","defineProperty","BarAnnotations","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","x","bar","y","getDimensions","height","width","size","Math","_jsx","arrayLikeToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","BarLegends","legends","toggleSerie","legend","undefined","BarItem","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","theme","useTheme","showTooltipFromEvent","showTooltipAt","hideTooltip","useTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","handleBlur","to","pointerEvents","fill","BarTooltip","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","tooltipLabel","datum","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","arrayWithoutHoles","iterableToArray","nonIterableSpread","getIndexScale","computeScale","all","min","max","normalizeData","acc","filterNullValues","coerceValue","Number","gt","value","lt","range","end","start","clampToZero","zeroIfNotFinite","isFinite","generateVerticalGroupedBars","formatValue","getColor","getIndex","getTooltipLabel","xScale","yScale","margin","compare","getY","getHeight","yRef","cleanedData","rawValue","indexValue","barWidth","barHeight","barData","id","formattedValue","hidden","index","key","absX","absY","generateHorizontalGroupedBars","getX","getWidth","xRef","generateGroupedBars","indexScaleConfig","hiddenIds","props","axis","otherAxis","scaleSpec","clampMin","values","entry","scale","bandwidth","params","flattenDeep","arr","Array","filterZerosIfLog","num","generateVerticalStackedBars","stackedData","d","stackedDataItem","generateHorizontalStackedBars","generateStackedBars","stack","getLegendDataForKeys","getLegendLabel","direction","getLegendDataForIndexes","getLegendData","legendLabel","getPropertyAccessor","useBar","valueFormat","setHiddenIds","useState","item","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","generateBars","barsWithValue","shouldRenderBarLabel","legendData","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","springConfig","useMotionConfig","outerWidth","outerHeight","innerWidth","innerHeight","useDimensions","transition","useTransition","enter","update","leave","config","immediate","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","layerContext","Bar","renderWrapper","otherProps","findBarUnderCursor","isCursorInRect","node","isNumber","InnerBarCanvas","renderBar","ctx","radius","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","layer","renderGridLinesToCanvas","renderAxesToCanvas","top","right","bottom","left","renderLegendToCanvas","containerWidth","containerHeight","renderAnnotationsToCanvas","handleMouseHover","getRelativeCursor","event","cursor","BarCanvas","forwardRef","ref","ResponsiveBar","ResponsiveBarCanvas"],"mappings":"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","sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(() => () => createElement(tooltip, { ...bar, ...data }), [\n        tooltip,\n        bar,\n        data,\n    ])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (computeScale(\n        indexScale,\n        { all: data.map(getIndex), min: 0, max: 0 },\n        size,\n        axis\n    ) as ScaleBand<string>).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : ((arr as unknown) as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep((stackedData as unknown) as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarDatum, BarLayer, BarLayerId, BarSvgProps, ComputedBarDatumWithValue } from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { BarCanvasLayer, BarCanvasProps, BarDatum, ComputedBarDatum } from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ndeclare module 'react' {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function forwardRef<T, P = {}>(\n        render: (props: P, ref: React.Ref<T>) => React.ReactElement | null\n    ): (props: P & React.RefAttributes<T>) => React.ReactElement | null\n}\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            height,\n            innerHeight,\n            innerWidth,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            margin,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            bars,\n            xScale,\n            yScale,\n            tooltip,\n            width,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale as any,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale as any,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"]},"metadata":{},"sourceType":"module"}